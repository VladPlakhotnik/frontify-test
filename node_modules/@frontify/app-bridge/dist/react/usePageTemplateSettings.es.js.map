{"version":3,"file":"usePageTemplateSettings.es.js","sources":["../../src/react/usePageTemplateSettings.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useEffect, useState } from 'react';\n\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { EmitterEvents } from '../types';\nimport { useThemeSettings } from './';\n\nexport const usePageTemplateSettings = <TPageTemplateSettings = Record<string, unknown>>(\n    appBridge: AppBridgeTheme,\n    template: 'cover' | 'documentPage' | 'library',\n    documentOrDocumentPageId?: number,\n) => {\n    const { themeSettings } = useThemeSettings(appBridge);\n    const [pageTemplateSettings, setPageTemplateSettings] = useState<Nullable<TPageTemplateSettings>>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [customizedPageTemplateSettingsKeys, setCustomizedPageTemplateSettingsKeys] = useState<string[]>([]);\n    const [mergedThemeAndPageTemplateSettings, setMergedThemeAndPageTemplateSettings] =\n        useState<Nullable<TPageTemplateSettings & Record<string, unknown>>>(null);\n\n    useEffect(() => {\n        const updateBlockSettingsFromEvent = (event: EmitterEvents['AppBridge:PageTemplateSettingsUpdated']) => {\n            setPageTemplateSettings({ ...event.pageTemplateSettings } as TPageTemplateSettings);\n        };\n\n        const getInitialPageTemplateSettings = async () => {\n            setIsLoading(true);\n            let loadedSettings: Nullable<TPageTemplateSettings> = null;\n\n            if (template === 'cover') {\n                loadedSettings = await appBridge.getCoverPageTemplateSettings<TPageTemplateSettings>();\n            } else if (documentOrDocumentPageId === undefined) {\n                console.error(`Document ID is required for ${template} template settings`);\n                setMergedThemeAndPageTemplateSettings(null);\n                setIsLoading(false);\n                return;\n            } else if (template === 'documentPage') {\n                loadedSettings =\n                    await appBridge.getDocumentPageTemplateSettings<TPageTemplateSettings>(documentOrDocumentPageId);\n            } else if (template === 'library') {\n                loadedSettings =\n                    await appBridge.getLibraryPageTemplateSettings<TPageTemplateSettings>(documentOrDocumentPageId);\n            }\n\n            setIsLoading(false);\n            setPageTemplateSettings(loadedSettings);\n        };\n\n        getInitialPageTemplateSettings();\n\n        window.emitter.on('AppBridge:PageTemplateSettingsUpdated', updateBlockSettingsFromEvent);\n\n        return () => {\n            window.emitter.off('AppBridge:PageTemplateSettingsUpdated', updateBlockSettingsFromEvent);\n        };\n    }, [appBridge, documentOrDocumentPageId, template]);\n\n    useEffect(() => {\n        if (!themeSettings || !pageTemplateSettings) {\n            return;\n        }\n\n        const overrides = [];\n        const mergedSettings: Record<string, unknown> & TPageTemplateSettings = { ...pageTemplateSettings };\n\n        for (const field of Object.keys(themeSettings)) {\n            if (\n                (pageTemplateSettings as Record<string, unknown>)[field] !== null &&\n                (pageTemplateSettings as Record<string, unknown>)[field] !== undefined\n            ) {\n                overrides.push(field);\n            } else {\n                (mergedSettings as Record<string, unknown>)[field] = themeSettings[field];\n            }\n        }\n\n        setCustomizedPageTemplateSettingsKeys(overrides);\n        setMergedThemeAndPageTemplateSettings(mergedSettings);\n    }, [themeSettings, pageTemplateSettings]);\n\n    const updatePageTemplateSettings = async (pageTemplateSettingsUpdate: Partial<TPageTemplateSettings>) => {\n        try {\n            if (template === 'cover') {\n                await appBridge.updateCoverPageTemplateSettings(pageTemplateSettingsUpdate);\n            } else if (documentOrDocumentPageId === undefined) {\n                console.error(`Document ID is required for ${template} template settings`);\n                setIsLoading(false);\n                return;\n            } else if (template === 'documentPage') {\n                await appBridge.updateDocumentPageTemplateSettings(\n                    documentOrDocumentPageId,\n                    pageTemplateSettingsUpdate,\n                );\n            } else if (template === 'library') {\n                await appBridge.updateLibraryPageTemplateSettings(documentOrDocumentPageId, pageTemplateSettingsUpdate);\n            }\n\n            window.emitter.emit('AppBridge:PageTemplateSettingsUpdated', {\n                pageTemplateSettings: {\n                    ...pageTemplateSettings,\n                    ...pageTemplateSettingsUpdate,\n                },\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return {\n        pageTemplateSettings: mergedThemeAndPageTemplateSettings,\n        customizedPageTemplateSettingsKeys,\n        updatePageTemplateSettings,\n        isLoading,\n    };\n};\n"],"names":["usePageTemplateSettings","appBridge","template","documentOrDocumentPageId","themeSettings","useThemeSettings","pageTemplateSettings","setPageTemplateSettings","useState","isLoading","setIsLoading","customizedPageTemplateSettingsKeys","setCustomizedPageTemplateSettingsKeys","mergedThemeAndPageTemplateSettings","setMergedThemeAndPageTemplateSettings","useEffect","updateBlockSettingsFromEvent","event","loadedSettings","overrides","mergedSettings","field","pageTemplateSettingsUpdate","error"],"mappings":";;AAQO,MAAMA,IAA0B,CACnCC,GACAC,GACAC,MACC;AACD,QAAM,EAAE,eAAAC,EAAA,IAAkBC,EAAiBJ,CAAS,GAC9C,CAACK,GAAsBC,CAAuB,IAAIC,EAA0C,IAAI,GAChG,CAACC,GAAWC,CAAY,IAAIF,EAAS,EAAK,GAC1C,CAACG,GAAoCC,CAAqC,IAAIJ,EAAmB,CAAE,CAAA,GACnG,CAACK,GAAoCC,CAAqC,IAC5EN,EAAoE,IAAI;AAE5E,SAAAO,EAAU,MAAM;AACN,UAAAC,IAA+B,CAACC,MAAkE;AACpG,MAAAV,EAAwB,EAAE,GAAGU,EAAM,qBAA+C,CAAA;AAAA,IAAA;AA0BvD,YAvBQ,YAAY;AAC/C,MAAAP,EAAa,EAAI;AACjB,UAAIQ,IAAkD;AAEtD,UAAIhB,MAAa;AACI,QAAAgB,IAAA,MAAMjB,EAAU;eAC1BE,MAA6B,QAAW;AACvC,gBAAA,MAAM,+BAA+BD,CAAQ,oBAAoB,GACzEY,EAAsC,IAAI,GAC1CJ,EAAa,EAAK;AAClB;AAAA,MAAA;AACJ,QAAWR,MAAa,iBAEhBgB,IAAA,MAAMjB,EAAU,gCAAuDE,CAAwB,IAC5FD,MAAa,cAEhBgB,IAAA,MAAMjB,EAAU,+BAAsDE,CAAwB;AAGtG,MAAAO,EAAa,EAAK,GAClBH,EAAwBW,CAAc;AAAA,IAAA,MAKnC,OAAA,QAAQ,GAAG,yCAAyCF,CAA4B,GAEhF,MAAM;AACF,aAAA,QAAQ,IAAI,yCAAyCA,CAA4B;AAAA,IAAA;AAAA,EAE7F,GAAA,CAACf,GAAWE,GAA0BD,CAAQ,CAAC,GAElDa,EAAU,MAAM;AACR,QAAA,CAACX,KAAiB,CAACE;AACnB;AAGJ,UAAMa,IAAY,CAAA,GACZC,IAAkE,EAAE,GAAGd;AAE7E,eAAWe,KAAS,OAAO,KAAKjB,CAAa;AACzC,MACKE,EAAiDe,CAAK,MAAM,QAC5Df,EAAiDe,CAAK,MAAM,SAE7DF,EAAU,KAAKE,CAAK,IAEnBD,EAA2CC,CAAK,IAAIjB,EAAciB,CAAK;AAIhF,IAAAT,EAAsCO,CAAS,GAC/CL,EAAsCM,CAAc;AAAA,EAAA,GACrD,CAAChB,GAAeE,CAAoB,CAAC,GA8BjC;AAAA,IACH,sBAAsBO;AAAA,IACtB,oCAAAF;AAAA,IACA,4BA/B+B,OAAOW,MAA+D;AACjG,UAAA;AACA,YAAIpB,MAAa;AACP,gBAAAD,EAAU,gCAAgCqB,CAA0B;AAAA,iBACnEnB,MAA6B,QAAW;AACvC,kBAAA,MAAM,+BAA+BD,CAAQ,oBAAoB,GACzEQ,EAAa,EAAK;AAClB;AAAA,QAAA;AACJ,UAAWR,MAAa,iBACpB,MAAMD,EAAU;AAAA,YACZE;AAAA,YACAmB;AAAA,UAAA,IAEGpB,MAAa,aACd,MAAAD,EAAU,kCAAkCE,GAA0BmB,CAA0B;AAGnG,eAAA,QAAQ,KAAK,yCAAyC;AAAA,UACzD,sBAAsB;AAAA,YAClB,GAAGhB;AAAA,YACH,GAAGgB;AAAA,UACP;AAAA,QAAA,CACH;AAAA,eACIC,GAAO;AACZ,gBAAQ,MAAMA,CAAK;AAAA,MACvB;AAAA,IAAA;AAAA,IAOA,WAAAd;AAAA,EAAA;AAER;"}