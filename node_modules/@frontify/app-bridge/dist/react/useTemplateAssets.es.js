import { useState as y, useEffect as K } from "react";
import { useThemeAssets as d } from "./useThemeAssets.es.js";
import { compareObjects as C } from "../utilities/object.es.js";
const f = async ({
  appBridge: e,
  template: s,
  documentId: t,
  documentPageId: a
}) => s === "cover" ? await e.getCoverPageTemplateAssets() : s === "documentPage" && a ? await e.getDocumentPageTemplateAssets(a) : s === "library" && t ? await e.getLibraryPageTemplateAssets(t) : {}, p = async (e, s, { appBridge: t, template: a, documentId: o, documentPageId: l }) => {
  a === "cover" ? await t.addAssetIdsToCoverPageTemplateAssetKey(e, s) : a === "documentPage" && l ? await t.addAssetIdsToDocumentPageTemplateAssetKey(l, e, s) : a === "library" && o && await t.addAssetIdsToLibraryPageTemplateAssetKey(o, e, s);
}, F = async (e, s, { appBridge: t, template: a, documentId: o, documentPageId: l }) => {
  a === "cover" ? await t.deleteAssetIdsFromCoverPageTemplateAssetKey(e, s) : a === "documentPage" && l ? await t.deleteAssetIdsFromDocumentPageTemplateAssetKey(l, e, s) : a === "library" && o && await t.deleteAssetIdsFromLibraryPageTemplateAssetKey(o, e, s);
}, j = (e, s, t, a) => {
  const [o, l] = y({}), { themeAssets: T } = d(e), [h, b] = y([]), [u, v] = y({});
  K(() => {
    let A = !0;
    const i = (r) => {
      r.template === s && r.documentId === t && r.documentPageId === a && !C(r.templateAssets, r.prevTemplateAssets) && l(r.templateAssets);
    };
    return s && ((async () => {
      const n = await f({
        appBridge: e,
        template: s,
        documentId: t,
        documentPageId: a
      });
      A && l(n);
    })(), window.emitter.on("AppBridge:TemplateAssetsUpdated", i)), () => {
      A = !1, window.emitter.off("AppBridge:TemplateAssetsUpdated", i);
    };
  }, [e, t, a, s]), K(() => {
    const A = [], i = { ...o };
    for (const r in T)
      o[r] !== null && o[r] !== void 0 ? A.push(r) : T[r].length > 0 && (i[r] = T[r]);
    b(A), v(i);
  }, [T, o]);
  const m = async () => {
    window.emitter.emit("AppBridge:TemplateAssetsUpdated", {
      template: s,
      documentId: t,
      documentPageId: a,
      templateAssets: await f({
        appBridge: e,
        template: s,
        documentId: t,
        documentPageId: a
      }),
      prevTemplateAssets: { ...o }
    });
  };
  return {
    templateAssets: u,
    customizedTemplateAssetsKeys: h,
    addAssetIdsToKey: async (A, i) => {
      await p(A, i, {
        appBridge: e,
        template: s,
        documentId: t,
        documentPageId: a
      }), m();
    },
    deleteAssetIdsFromKey: async (A, i) => {
      await F(A, i, {
        appBridge: e,
        template: s,
        documentId: t,
        documentPageId: a
      }), m();
    },
    updateAssetIdsFromKey: async (A, i) => {
      var w;
      const n = ((w = (await f({
        appBridge: e,
        template: s,
        documentId: t,
        documentPageId: a
      }))[A]) == null ? void 0 : w.map((c) => c.id)) ?? [];
      try {
        await F(A, n, {
          appBridge: e,
          template: s,
          documentId: t,
          documentPageId: a
        }), await p(A, i, {
          appBridge: e,
          template: s,
          documentId: t,
          documentPageId: a
        });
      } catch (c) {
        console.error(c);
      }
      m();
    }
  };
};
export {
  j as useTemplateAssets
};
//# sourceMappingURL=useTemplateAssets.es.js.map
