import { useRef as w, useState as l } from "react";
var y = /* @__PURE__ */ ((o) => (o.Init = "init", o.Started = "started", o.Pending = "pending", o.Ready = "ready", o.Error = "error", o))(y || {});
const g = (o) => {
  const e = w(null), [d, n] = l(
    "init"
    /* Init */
  ), [c, a] = l(null), s = async (t) => {
    try {
      n(
        "started"
        /* Started */
      );
      const { assetBulkDownloadToken: r } = await o.api({
        name: "getAssetBulkDownloadToken",
        payload: { settingIds: t, documentBlockId: o.getBlockId() }
      });
      a(null), u(r);
    } catch (r) {
      n(
        "error"
        /* Error */
      ), console.error(r);
    }
  }, u = async (t) => {
    try {
      const r = await o.getBulkDownloadByToken(t);
      r.downloadUrl ? (a(r.downloadUrl), n(
        "ready"
        /* Ready */
      )) : (n(
        "pending"
        /* Pending */
      ), e.current = i(r.signature));
    } catch (r) {
      n(
        "error"
        /* Error */
      ), console.error(r);
    }
  }, i = (t) => window.setInterval(() => {
    (async () => {
      try {
        const r = await o.getBulkDownloadBySignature(t);
        r.downloadUrl && (n(
          "ready"
          /* Ready */
        ), a(r.downloadUrl), e.current && clearInterval(e.current));
      } catch (r) {
        n(
          "error"
          /* Error */
        ), console.error(r), e.current && clearInterval(e.current);
      }
    })();
  }, 2500);
  return { generateBulkDownload: s, status: d, downloadUrl: c };
};
export {
  y as AssetBulkDownloadState,
  g as useAssetBulkDownload
};
//# sourceMappingURL=useAssetBulkDownload.es.js.map
