{"version":3,"file":"useTemplateAssets.es.js","sources":["../../src/react/useTemplateAssets.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useEffect, useState } from 'react';\n\nimport type { AppBridgeTheme } from '../AppBridgeTheme';\nimport type { Asset } from '../types';\nimport { compareObjects } from '../utilities';\nimport { useThemeAssets } from './';\n\ntype HookArgs = {\n    appBridge: AppBridgeTheme;\n    template?: 'documentPage' | 'library' | 'cover';\n    documentId?: number;\n    documentPageId?: number;\n};\n\nconst getTemplateAssets = async ({\n    appBridge,\n    template,\n    documentId,\n    documentPageId,\n}: HookArgs): Promise<Record<string, Asset[]>> => {\n    if (template === 'cover') {\n        return await appBridge.getCoverPageTemplateAssets();\n    } else if (template === 'documentPage' && documentPageId) {\n        return await appBridge.getDocumentPageTemplateAssets(documentPageId);\n    } else if (template === 'library' && documentId) {\n        return await appBridge.getLibraryPageTemplateAssets(documentId);\n    }\n\n    return {};\n};\n\nconst addAssetIdsToTemplateAssetKey = async (\n    key: string,\n    assetIds: number[],\n    { appBridge, template, documentId, documentPageId }: HookArgs,\n): Promise<void> => {\n    if (template === 'cover') {\n        await appBridge.addAssetIdsToCoverPageTemplateAssetKey(key, assetIds);\n    } else if (template === 'documentPage' && documentPageId) {\n        await appBridge.addAssetIdsToDocumentPageTemplateAssetKey(documentPageId, key, assetIds);\n    } else if (template === 'library' && documentId) {\n        await appBridge.addAssetIdsToLibraryPageTemplateAssetKey(documentId, key, assetIds);\n    }\n};\n\nconst deleteAssetIdsFromTemplateAssetKey = async (\n    key: string,\n    assetIds: number[],\n    { appBridge, template, documentId, documentPageId }: HookArgs,\n): Promise<void> => {\n    if (template === 'cover') {\n        await appBridge.deleteAssetIdsFromCoverPageTemplateAssetKey(key, assetIds);\n    } else if (template === 'documentPage' && documentPageId) {\n        await appBridge.deleteAssetIdsFromDocumentPageTemplateAssetKey(documentPageId, key, assetIds);\n    } else if (template === 'library' && documentId) {\n        await appBridge.deleteAssetIdsFromLibraryPageTemplateAssetKey(documentId, key, assetIds);\n    }\n};\n\nexport const useTemplateAssets = (\n    appBridge: AppBridgeTheme,\n    template?: 'documentPage' | 'library' | 'cover',\n    documentId?: number,\n    documentPageId?: number,\n) => {\n    const [templateAssets, setTemplateAssets] = useState<Record<string, Asset[]>>({});\n    const { themeAssets } = useThemeAssets(appBridge);\n    const [customizedTemplateAssetsKeys, setCustomizedTemplateAssetsKeys] = useState<string[]>([]);\n    const [mergedThemeAndTemplateAssets, setMergedThemeAndTemplateAssets] = useState<Record<string, Asset[]>>({});\n\n    // Fetch the template assets on mount.\n    // And add listener for template assets updates.\n    useEffect(() => {\n        let componentMounted = true;\n\n        const updateTemplateAssetsFromEvent = (event: {\n            template?: 'documentPage' | 'library' | 'cover';\n            documentId?: number;\n            documentPageId?: number;\n            templateAssets: Record<string, Asset[]>;\n            prevTemplateAssets: Record<string, Asset[]>;\n        }) => {\n            if (\n                event.template === template &&\n                event.documentId === documentId &&\n                event.documentPageId === documentPageId &&\n                !compareObjects(event.templateAssets, event.prevTemplateAssets)\n            ) {\n                setTemplateAssets(event.templateAssets);\n            }\n        };\n\n        if (template) {\n            const mountingFetch = async () => {\n                const allTemplateAssets = await getTemplateAssets({\n                    appBridge,\n                    template,\n                    documentId,\n                    documentPageId,\n                });\n\n                if (componentMounted) {\n                    setTemplateAssets(allTemplateAssets);\n                }\n            };\n            mountingFetch();\n\n            window.emitter.on('AppBridge:TemplateAssetsUpdated', updateTemplateAssetsFromEvent);\n        }\n\n        return () => {\n            componentMounted = false;\n            window.emitter.off('AppBridge:TemplateAssetsUpdated', updateTemplateAssetsFromEvent);\n        };\n    }, [appBridge, documentId, documentPageId, template]);\n\n    useEffect(() => {\n        const overrides = [];\n        const mergedAssets = { ...templateAssets };\n\n        for (const field in themeAssets) {\n            if (templateAssets[field] !== null && templateAssets[field] !== undefined) {\n                overrides.push(field);\n            } else if (themeAssets[field].length > 0) {\n                mergedAssets[field] = themeAssets[field];\n            }\n        }\n\n        setCustomizedTemplateAssetsKeys(overrides);\n        setMergedThemeAndTemplateAssets(mergedAssets);\n    }, [themeAssets, templateAssets]);\n\n    const emitUpdatedTemplateAssets = async () => {\n        window.emitter.emit('AppBridge:TemplateAssetsUpdated', {\n            template,\n            documentId,\n            documentPageId,\n            templateAssets: await getTemplateAssets({\n                appBridge,\n                template,\n                documentId,\n                documentPageId,\n            }),\n            prevTemplateAssets: { ...templateAssets },\n        });\n    };\n\n    const updateAssetIdsFromKey = async (key: string, newAssetIds: number[]) => {\n        const currentTemplateAssets = await getTemplateAssets({\n            appBridge,\n            template,\n            documentId,\n            documentPageId,\n        });\n        const oldAssetIds = currentTemplateAssets[key]?.map((asset) => asset.id) ?? [];\n\n        try {\n            await deleteAssetIdsFromTemplateAssetKey(key, oldAssetIds, {\n                appBridge,\n                template,\n                documentId,\n                documentPageId,\n            });\n            await addAssetIdsToTemplateAssetKey(key, newAssetIds, {\n                appBridge,\n                template,\n                documentId,\n                documentPageId,\n            });\n        } catch (error) {\n            console.error(error);\n        }\n\n        emitUpdatedTemplateAssets();\n    };\n\n    const deleteAssetIdsFromKey = async (key: string, assetIds: number[]) => {\n        await deleteAssetIdsFromTemplateAssetKey(key, assetIds, {\n            appBridge,\n            template,\n            documentId,\n            documentPageId,\n        });\n        emitUpdatedTemplateAssets();\n    };\n\n    const addAssetIdsToKey = async (key: string, assetIds: number[]) => {\n        await addAssetIdsToTemplateAssetKey(key, assetIds, {\n            appBridge,\n            template,\n            documentId,\n            documentPageId,\n        });\n        emitUpdatedTemplateAssets();\n    };\n\n    return {\n        templateAssets: mergedThemeAndTemplateAssets,\n        customizedTemplateAssetsKeys,\n        addAssetIdsToKey,\n        deleteAssetIdsFromKey,\n        updateAssetIdsFromKey,\n    };\n};\n"],"names":["getTemplateAssets","appBridge","template","documentId","documentPageId","addAssetIdsToTemplateAssetKey","key","assetIds","deleteAssetIdsFromTemplateAssetKey","useTemplateAssets","templateAssets","setTemplateAssets","useState","themeAssets","useThemeAssets","customizedTemplateAssetsKeys","setCustomizedTemplateAssetsKeys","mergedThemeAndTemplateAssets","setMergedThemeAndTemplateAssets","useEffect","componentMounted","updateTemplateAssetsFromEvent","event","compareObjects","allTemplateAssets","overrides","mergedAssets","field","emitUpdatedTemplateAssets","newAssetIds","oldAssetIds","_a","asset","error"],"mappings":"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"}