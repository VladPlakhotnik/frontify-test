{"version":3,"file":"useBlockTemplates.es.js","sources":["../../src/react/useBlockTemplates.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useEffect, useState } from 'react';\n\nimport type { AppBridgeBlock } from '../AppBridgeBlock';\nimport type { Template } from '../types';\nimport { compareObjects } from '../utilities';\n\nexport const useBlockTemplates = (appBridge: AppBridgeBlock) => {\n    const blockId = appBridge.getBlockId();\n\n    const [blockTemplates, setBlockTemplates] = useState<Record<string, Template[]>>({});\n    const [error, setError] = useState<string | null>(null);\n\n    const updateBlockTemplatesFromEvent = (event: {\n        blockId: number;\n        blockTemplates: Record<string, Template[]>;\n        prevBlockTemplates: Record<string, Template[]>;\n    }) => {\n        if (event.blockId === blockId && !compareObjects(event.blockTemplates, event.prevBlockTemplates)) {\n            setBlockTemplates(event.blockTemplates);\n        }\n    };\n\n    const handleErrorMessage = (error: unknown) => {\n        let errorMessage;\n\n        if (error instanceof Error) {\n            errorMessage = error.message;\n        } else if (typeof error === 'string') {\n            errorMessage = error;\n        } else {\n            errorMessage = String(error);\n        }\n\n        setError(errorMessage);\n    };\n\n    // Fetch the block templates on mount.\n    // And add listener for block template updates.\n    useEffect(() => {\n        let componentMounted = true;\n\n        if (blockId) {\n            const mountingFetch = async () => {\n                try {\n                    const result = await appBridge.getBlockTemplates();\n                    if (componentMounted) {\n                        setBlockTemplates(result);\n                    }\n                } catch (error) {\n                    handleErrorMessage(error);\n                }\n            };\n\n            mountingFetch();\n            window.emitter.on('AppBridge:BlockTemplatesUpdated', updateBlockTemplatesFromEvent);\n        }\n\n        return () => {\n            componentMounted = false;\n            window.emitter.off('AppBridge:BlockTemplatesUpdated', updateBlockTemplatesFromEvent);\n        };\n    }, [appBridge]);\n\n    const emitUpdatedBlockTemplates = async () => {\n        let fetchedBlockTemplates;\n\n        try {\n            fetchedBlockTemplates = await appBridge.getBlockTemplates();\n        } catch (error) {\n            handleErrorMessage(error);\n        }\n\n        if (fetchedBlockTemplates) {\n            window.emitter.emit('AppBridge:BlockTemplatesUpdated', {\n                blockId,\n                blockTemplates: fetchedBlockTemplates,\n                prevBlockTemplates: { ...blockTemplates },\n            });\n        }\n    };\n\n    const updateTemplateIdsFromKey = async (key: string, newTemplateIds: number[]) => {\n        const currentBlockTemplates = await appBridge.getBlockTemplates();\n        const oldTemplateIds = currentBlockTemplates[key]?.map((template) => template.id) ?? [];\n\n        try {\n            await appBridge.deleteTemplateIdsFromBlockTemplateKey(key, oldTemplateIds);\n            await appBridge.addTemplateIdsToBlockTemplateKey(key, newTemplateIds);\n        } catch (error) {\n            handleErrorMessage(error);\n        }\n\n        emitUpdatedBlockTemplates();\n    };\n\n    const deleteTemplateIdsFromKey = async (key: string, templateIds: number[]) => {\n        try {\n            await appBridge.deleteTemplateIdsFromBlockTemplateKey(key, templateIds);\n        } catch (error) {\n            handleErrorMessage(error);\n        }\n\n        emitUpdatedBlockTemplates();\n    };\n\n    const addTemplateIdsToKey = async (key: string, templateIds: number[]) => {\n        try {\n            await appBridge.addTemplateIdsToBlockTemplateKey(key, templateIds);\n        } catch (error) {\n            handleErrorMessage(error);\n        }\n\n        emitUpdatedBlockTemplates();\n    };\n\n    return {\n        blockTemplates,\n        addTemplateIdsToKey,\n        deleteTemplateIdsFromKey,\n        updateTemplateIdsFromKey,\n        error,\n    };\n};\n"],"names":["useBlockTemplates","appBridge","blockId","blockTemplates","setBlockTemplates","useState","error","setError","updateBlockTemplatesFromEvent","event","compareObjects","handleErrorMessage","errorMessage","useEffect","componentMounted","result","emitUpdatedBlockTemplates","fetchedBlockTemplates","key","templateIds","newTemplateIds","oldTemplateIds","_a","template"],"mappings":";;AAQa,MAAAA,IAAoB,CAACC,MAA8B;AACtD,QAAAC,IAAUD,EAAU,cAEpB,CAACE,GAAgBC,CAAiB,IAAIC,EAAqC,CAAE,CAAA,GAC7E,CAACC,GAAOC,CAAQ,IAAIF,EAAwB,IAAI,GAEhDG,IAAgC,CAACC,MAIjC;AACE,IAAAA,EAAM,YAAYP,KAAW,CAACQ,EAAeD,EAAM,gBAAgBA,EAAM,kBAAkB,KAC3FL,EAAkBK,EAAM,cAAc;AAAA,EAC1C,GAGEE,IAAqB,CAACL,MAAmB;AACvC,QAAAM;AAEJ,IAAIN,aAAiB,QACjBM,IAAeN,EAAM,UACd,OAAOA,KAAU,WACTA,IAAAA,IAEfM,IAAe,OAAON,CAAK,GAG/BC,EAASK,CAAY;AAAA,EAAA;AAKzB,EAAAC,EAAU,MAAM;AACZ,QAAIC,IAAmB;AAEvB,WAAIZ,OACsB,YAAY;AAC1B,UAAA;AACM,cAAAa,IAAS,MAAMd,EAAU;AAC/B,QAAIa,KACAV,EAAkBW,CAAM;AAAA,eAEvBT,GAAO;AACZ,QAAAK,EAAmBL,CAAK;AAAA,MAC5B;AAAA,IAAA,MAIG,OAAA,QAAQ,GAAG,mCAAmCE,CAA6B,IAG/E,MAAM;AACU,MAAAM,IAAA,IACZ,OAAA,QAAQ,IAAI,mCAAmCN,CAA6B;AAAA,IAAA;AAAA,EACvF,GACD,CAACP,CAAS,CAAC;AAEd,QAAMe,IAA4B,YAAY;AACtC,QAAAC;AAEA,QAAA;AACwB,MAAAA,IAAA,MAAMhB,EAAU;aACnCK,GAAO;AACZ,MAAAK,EAAmBL,CAAK;AAAA,IAC5B;AAEA,IAAIW,KACO,OAAA,QAAQ,KAAK,mCAAmC;AAAA,MACnD,SAAAf;AAAA,MACA,gBAAgBe;AAAA,MAChB,oBAAoB,EAAE,GAAGd,EAAe;AAAA,IAAA,CAC3C;AAAA,EACL;AAqCG,SAAA;AAAA,IACH,gBAAAA;AAAA,IACA,qBAZwB,OAAOe,GAAaC,MAA0B;AAClE,UAAA;AACM,cAAAlB,EAAU,iCAAiCiB,GAAKC,CAAW;AAAA,eAC5Db,GAAO;AACZ,QAAAK,EAAmBL,CAAK;AAAA,MAC5B;AAE0B,MAAAU;IAAA;AAAA,IAM1B,0BAvB6B,OAAOE,GAAaC,MAA0B;AACvE,UAAA;AACM,cAAAlB,EAAU,sCAAsCiB,GAAKC,CAAW;AAAA,eACjEb,GAAO;AACZ,QAAAK,EAAmBL,CAAK;AAAA,MAC5B;AAE0B,MAAAU;IAAA;AAAA,IAiB1B,0BAtC6B,OAAOE,GAAaE,MAA6B;;AAExE,YAAAC,MAAiBC,KADO,MAAMrB,EAAU,qBACDiB,CAAG,MAAzB,gBAAAI,EAA4B,IAAI,CAACC,MAAaA,EAAS,QAAO;AAEjF,UAAA;AACM,cAAAtB,EAAU,sCAAsCiB,GAAKG,CAAc,GACnE,MAAApB,EAAU,iCAAiCiB,GAAKE,CAAc;AAAA,eAC/Dd,GAAO;AACZ,QAAAK,EAAmBL,CAAK;AAAA,MAC5B;AAE0B,MAAAU;IAAA;AAAA,IA4B1B,OAAAV;AAAA,EAAA;AAER;"}