{"version":3,"file":"AppBridgePlatformApp.es.js","sources":["../src/AppBridgePlatformApp.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type {\n    ApiHandlerParameter,\n    ApiMethodNameValidator,\n    ApiReturn,\n    AppBridge,\n    CommandNameValidator,\n    ContextAsEventName,\n    ContextReturn,\n    DispatchHandlerParameter,\n    EventCallbackParameter,\n    EventNameParameter,\n    EventNameValidator,\n    EventUnsubscribeFunction,\n    StateAsEventName,\n    StateReturn,\n    SubscribeMap,\n} from './AppBridge';\nimport { Topic } from './types';\nimport { ErrorMessageBus, IMessageBus, MessageBus } from './utilities/MessageBus';\nimport { generateRandomString, notify, subscribe } from './utilities';\nimport { getQueryParameters } from './utilities/queryParams';\nimport type { ApiMethodRegistry } from './registries';\nimport { openConnection } from './registries';\nimport { InitializationError } from './errors';\n\nexport type PlatformAppApiMethod = ApiMethodNameValidator<\n    Pick<ApiMethodRegistry, 'getCurrentUser' | 'getAssetResourceInformation' | 'createAsset'>\n>;\n\nexport type PlatformAppCommandRegistry = CommandNameValidator<{\n    openConnection: void;\n}>;\n\nexport type PlatformAppCommand = CommandNameValidator<Pick<PlatformAppCommandRegistry, 'openConnection'>>;\n\nexport type PlatformAppState = {\n    settings: Record<string, unknown>;\n};\n\ntype InitializeEvent = {\n    apiPort: MessagePort;\n    statePort: MessagePort;\n    context: PlatformAppContext;\n    state: PlatformAppState;\n};\n\ntype AppBaseProps = {\n    token: string;\n    marketplaceServiceAppId: string;\n    connected: boolean;\n};\n\nexport type PlatformAppContext = AppBaseProps &\n    (\n        | {\n              assetId: string;\n              brandId: string;\n              domain: string;\n              parentId: string;\n              type: 'ASSET_ACTION';\n          }\n        | {\n              brandId: string;\n              domain: string;\n              parentId: string;\n              type: 'ASSET_CREATION';\n          }\n    );\n\nexport type PlatformAppEvent = EventNameValidator<\n    StateAsEventName<PlatformAppState & { '*': PlatformAppState }> &\n        ContextAsEventName<PlatformAppContext & { '*': PlatformAppContext }>\n>;\n\nexport class AppBridgePlatformApp implements IAppBridgePlatformApp {\n    private apiMessageBus: IMessageBus = new ErrorMessageBus();\n    private stateMessageBus: IMessageBus = new ErrorMessageBus();\n    private initialized: boolean = false;\n    private localContext?: PlatformAppContext;\n    private localState: PlatformAppState = { settings: {} };\n\n    private readonly subscribeMap: SubscribeMap<PlatformAppEvent> = {\n        'State.*': new Map(),\n        'State.settings': new Map(),\n        'Context.*': new Map(),\n        'Context.marketplaceServiceAppId': new Map(),\n        'Context.token': new Map(),\n        'Context.assetId': new Map(),\n        'Context.brandId': new Map(),\n        'Context.parentId': new Map(),\n        'Context.domain': new Map(),\n        'Context.type': new Map(),\n        'Context.connected': new Map(),\n    };\n\n    api<ApiMethodName extends keyof PlatformAppApiMethod>(\n        apiHandler: ApiHandlerParameter<ApiMethodName, PlatformAppApiMethod>,\n    ): ApiReturn<ApiMethodName, PlatformAppApiMethod> {\n        return this.apiMessageBus.post({\n            parameter: apiHandler,\n        }) as ApiReturn<ApiMethodName, PlatformAppApiMethod>;\n    }\n\n    private guardForInitialization() {\n        const initialContext = getQueryParameters(window.location.href);\n        if (!initialContext.token) {\n            throw new InitializationError();\n        }\n        return this.initialized;\n    }\n\n    async dispatch<CommandName extends keyof PlatformAppCommand>(\n        dispatchHandler: DispatchHandlerParameter<CommandName, PlatformAppCommand>,\n    ): Promise<void> {\n        if (dispatchHandler.name === openConnection().name) {\n            if (this.guardForInitialization()) {\n                return;\n            }\n\n            const PUBSUB_CHECKSUM = generateRandomString();\n\n            notify(Topic.Init, PUBSUB_CHECKSUM, {\n                token: getQueryParameters(window.location.href).token,\n                appBridgeVersion: 'v3',\n            });\n\n            subscribe<InitializeEvent>(Topic.Init, PUBSUB_CHECKSUM).then(({ statePort, apiPort, context, state }) => {\n                this.apiMessageBus = new MessageBus(apiPort);\n                this.stateMessageBus = new MessageBus(statePort);\n\n                this.localContext = context;\n                this.localState = state;\n                this.initialized = true;\n\n                this.callSubscribedTopic('Context.connected', [true, false]);\n                this.callSubscribedTopic('Context.*', [this.localContext, this.localContext]);\n                this.callSubscribedTopic('State.*', [this.localState, this.localState]);\n            });\n        }\n    }\n\n    context(key?: void): ContextReturn<PlatformAppContext, void>;\n    context<Key extends keyof PlatformAppContext>(key?: Key): ContextReturn<PlatformAppContext, Key>;\n    context<Key extends keyof PlatformAppContext>(key?: keyof PlatformAppContext | void): unknown {\n        if (typeof key === 'undefined') {\n            return {\n                get: () => this.localContext,\n                subscribe: (\n                    callback: (nextContext: PlatformAppContext, previousContext: PlatformAppContext) => void,\n                ) => {\n                    return this.subscribe('Context.*', callback);\n                },\n            };\n        }\n        return {\n            get: () => (this.localContext ? this.localContext[key] : {}),\n            subscribe: (\n                callback: (nextContext: PlatformAppContext[Key], previousContext: PlatformAppContext[Key]) => void,\n            ) => {\n                // @ts-expect-error typing is correct, but TS doesn't like it\n                return this.subscribe(`Context.${key}`, callback);\n            },\n        };\n    }\n\n    private async setInternalState(state: Promise<PlatformAppState>): Promise<void> {\n        const prevState = this.localState;\n        this.localState = await state;\n        this.callSubscribedTopic('State.*', [this.localState, prevState]);\n    }\n\n    state(): StateReturn<PlatformAppState, void>;\n    state<Key extends keyof PlatformAppState>(key: Key): StateReturn<PlatformAppState, Key>;\n    state<Key extends keyof PlatformAppState>(key?: keyof PlatformAppState | void): unknown {\n        if (typeof key === 'undefined') {\n            return {\n                get: () => this.localState,\n                set: (nextState: PlatformAppState) => {\n                    const newState = this.stateMessageBus.post({\n                        parameter: { nextState },\n                    }) as Promise<PlatformAppState>;\n                    this.setInternalState(newState);\n                },\n                subscribe: (callback: (nextState: PlatformAppState, previousState: PlatformAppState) => void) => {\n                    return this.subscribe('State.*', callback);\n                },\n            };\n        }\n\n        return {\n            get: () => this.localState[key],\n            set: (nextState: PlatformAppState[Key]) => {\n                const newState = this.stateMessageBus.post({\n                    parameter: { nextState },\n                }) as Promise<PlatformAppState>;\n                this.setInternalState(newState);\n            },\n            subscribe: (callback: (nextState: PlatformAppState[Key], previousState: PlatformAppState[Key]) => void) => {\n                return this.subscribe(`State.${key}`, callback);\n            },\n        };\n    }\n\n    subscribe<EventName extends keyof PlatformAppEvent>(\n        eventName: EventNameParameter<EventName, PlatformAppEvent>,\n        callback: EventCallbackParameter<EventName, PlatformAppEvent>,\n    ): EventUnsubscribeFunction {\n        if (!(eventName in this.subscribeMap)) {\n            this.subscribeMap[eventName] = new Map();\n        }\n\n        this.subscribeMap[eventName].set(callback, true);\n\n        return () => {\n            this.subscribeMap[eventName].delete(callback);\n        };\n    }\n\n    callSubscribedTopic<EventName extends keyof PlatformAppEvent>(\n        eventName: EventNameParameter<EventName, PlatformAppEvent>,\n        callbackParameters: PlatformAppEvent[EventName],\n    ) {\n        const callbackMap = this.subscribeMap[eventName];\n        if (callbackMap && callbackMap?.size !== undefined) {\n            for (const [callback] of callbackMap.entries()) {\n                // @ts-expect-error if there are multiple parameters, we spread them in the callback call\n                callback(...(Array.isArray(callbackParameters) ? callbackParameters : [callbackParameters]));\n            }\n        }\n    }\n}\n\nexport interface IAppBridgePlatformApp<\n    State extends PlatformAppState = PlatformAppState,\n    Context extends PlatformAppContext = PlatformAppContext,\n    Event extends PlatformAppEvent = PlatformAppEvent,\n> extends AppBridge<PlatformAppApiMethod, PlatformAppCommand, State, Context, Event> {\n    api<ApiMethodName extends keyof PlatformAppApiMethod>(\n        apiHandler: ApiHandlerParameter<ApiMethodName, PlatformAppApiMethod>,\n    ): ApiReturn<ApiMethodName, PlatformAppApiMethod>;\n\n    dispatch<CommandName extends keyof PlatformAppCommand>(\n        dispatchHandler: DispatchHandlerParameter<CommandName, PlatformAppCommand>,\n    ): Promise<void>;\n\n    state(): StateReturn<State, void>;\n\n    state<Key extends keyof State>(key: Key): StateReturn<State, Key>;\n\n    state(key?: keyof State | void): unknown;\n\n    context(): ContextReturn<Context, void>;\n\n    context<Key extends keyof Context>(key: Key): ContextReturn<Context, Key>;\n\n    context(key?: keyof Context | void): unknown;\n\n    subscribe<EventName extends keyof Event>(\n        eventName: EventNameParameter<EventName, Event>,\n        callback: EventCallbackParameter<EventName, Event>,\n    ): EventUnsubscribeFunction;\n}\n"],"names":["AppBridgePlatformApp","ErrorMessageBus","apiHandler","getQueryParameters","InitializationError","dispatchHandler","openConnection","PUBSUB_CHECKSUM","generateRandomString","notify","Topic","subscribe","statePort","apiPort","context","state","MessageBus","key","callback","prevState","nextState","newState","eventName","callbackParameters","callbackMap"],"mappings":"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"}