import { ErrorMessageBus as n, MessageBus as a } from "./utilities/MessageBus.es.js";
import { getQueryParameters as o } from "./utilities/queryParams.es.js";
import { openConnection as l } from "./registries/commands/Connection.es.js";
import { InitializationError as u } from "./errors/InitializationError.es.js";
import { generateRandomString as h } from "./utilities/hash.es.js";
import { notify as b } from "./utilities/notify.es.js";
import { Topic as r } from "./types/Topic.es.js";
import { subscribe as d } from "./utilities/subscribe.es.js";
class I {
  constructor() {
    this.apiMessageBus = new n(), this.stateMessageBus = new n(), this.initialized = !1, this.localState = { settings: {} }, this.subscribeMap = {
      "State.*": /* @__PURE__ */ new Map(),
      "State.settings": /* @__PURE__ */ new Map(),
      "Context.*": /* @__PURE__ */ new Map(),
      "Context.marketplaceServiceAppId": /* @__PURE__ */ new Map(),
      "Context.token": /* @__PURE__ */ new Map(),
      "Context.assetId": /* @__PURE__ */ new Map(),
      "Context.brandId": /* @__PURE__ */ new Map(),
      "Context.parentId": /* @__PURE__ */ new Map(),
      "Context.domain": /* @__PURE__ */ new Map(),
      "Context.type": /* @__PURE__ */ new Map(),
      "Context.connected": /* @__PURE__ */ new Map()
    };
  }
  api(e) {
    return this.apiMessageBus.post({
      parameter: e
    });
  }
  guardForInitialization() {
    if (!o(window.location.href).token)
      throw new u();
    return this.initialized;
  }
  async dispatch(e) {
    if (e.name === l().name) {
      if (this.guardForInitialization())
        return;
      const t = h();
      b(r.Init, t, {
        token: o(window.location.href).token,
        appBridgeVersion: "v3"
      }), d(r.Init, t).then(({ statePort: s, apiPort: i, context: c, state: p }) => {
        this.apiMessageBus = new a(i), this.stateMessageBus = new a(s), this.localContext = c, this.localState = p, this.initialized = !0, this.callSubscribedTopic("Context.connected", [!0, !1]), this.callSubscribedTopic("Context.*", [this.localContext, this.localContext]), this.callSubscribedTopic("State.*", [this.localState, this.localState]);
      });
    }
  }
  context(e) {
    return typeof e > "u" ? {
      get: () => this.localContext,
      subscribe: (t) => this.subscribe("Context.*", t)
    } : {
      get: () => this.localContext ? this.localContext[e] : {},
      subscribe: (t) => this.subscribe(`Context.${e}`, t)
    };
  }
  async setInternalState(e) {
    const t = this.localState;
    this.localState = await e, this.callSubscribedTopic("State.*", [this.localState, t]);
  }
  state(e) {
    return typeof e > "u" ? {
      get: () => this.localState,
      set: (t) => {
        const s = this.stateMessageBus.post({
          parameter: { nextState: t }
        });
        this.setInternalState(s);
      },
      subscribe: (t) => this.subscribe("State.*", t)
    } : {
      get: () => this.localState[e],
      set: (t) => {
        const s = this.stateMessageBus.post({
          parameter: { nextState: t }
        });
        this.setInternalState(s);
      },
      subscribe: (t) => this.subscribe(`State.${e}`, t)
    };
  }
  subscribe(e, t) {
    return e in this.subscribeMap || (this.subscribeMap[e] = /* @__PURE__ */ new Map()), this.subscribeMap[e].set(t, !0), () => {
      this.subscribeMap[e].delete(t);
    };
  }
  callSubscribedTopic(e, t) {
    const s = this.subscribeMap[e];
    if (s && (s == null ? void 0 : s.size) !== void 0)
      for (const [i] of s.entries())
        i(...Array.isArray(t) ? t : [t]);
  }
}
export {
  I as AppBridgePlatformApp
};
//# sourceMappingURL=AppBridgePlatformApp.es.js.map
