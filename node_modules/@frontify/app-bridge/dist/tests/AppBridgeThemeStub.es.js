import ne from "mitt";
import { spy as le, stub as e } from "sinon";
import { GuidelineSearchResultDummy as p } from "./GuidelineSearchResultDummy.es.js";
import { CoverPageDummy as d } from "./CoverPageDummy.es.js";
import { DocumentDummy as s } from "./DocumentDummy.es.js";
import { DocumentGroupDummy as i } from "./DocumentGroupDummy.es.js";
import { DocumentPageDummy as r, DocumentPageDuplicateDummy as ce } from "./DocumentPageDummy.es.js";
import { DocumentCategoryDummy as D } from "./DocumentCategoryDummy.es.js";
import { DocumentSectionDummy as v } from "./DocumentSectionDummy.es.js";
import { ColorPaletteDummy as P } from "./ColorPaletteDummy.es.js";
import { ColorDummy as C } from "./ColorDummy.es.js";
import { DocumentTargetsDummy as me, DocumentPageTargetsDummy as ie, UpdateTargetsDummy as A } from "./TargetsDummy.es.js";
import { BrandportalLinkDummy as O } from "./BrandportalLinkDummy.es.js";
import { mergeDeep as g } from "../utilities/object.es.js";
import { AssetDummy as De } from "./AssetDummy.es.js";
const ue = 234551, de = 3452, G = 7777, m = 5332, ge = 95694, he = 345882, h = 6456, U = 34532, N = 3455345, F = 2342, M = 2343445, L = 2434, S = 552, R = 1145, f = 32345, y = 147, _e = 258, we = 369, _ = 23442, k = 235345, b = 12352, B = 55221, K = 24324, Y = 3532, Z = 98954, Ie = 3421, Te = 65725, pe = 95934, ve = 2341, $ = 653543, j = 23411, x = 56657, ke = ({
  editorState: z = !1,
  brandId: J = ue,
  portalId: H = G,
  projectId: Q = de,
  pageTemplateSettings: V = {},
  pageTemplateAssets: u = {},
  themeSettings: W = {},
  themeAssets: X = {},
  language: q = "en",
  openAssetChooser: ee = () => null,
  closeAssetChooser: te = () => null
} = {}) => {
  window.emitter = le(ne());
  let n = V, w = W;
  const l = {}, c = {}, E = async (t) => Object.entries(t).reduce((o, [a, oe]) => {
    const re = c[a] ?? [], ae = l[a] ?? [];
    return o[a] = [
      ...oe.filter((T) => !ae.includes(T.id)),
      ...re.map((T) => De.with(T))
    ], o;
  }, {}), I = async () => E(u), se = async () => E(X);
  return {
    getPortalId: e().returns(H),
    getProjectId: e().returns(Q),
    getEditorState: e().returns(z),
    getCoverPage: e().resolves(d.with(G)),
    getAllDocuments: e().resolves([
      s.with(h),
      s.with(U),
      s.with(N),
      s.with(F),
      s.with(M),
      s.withDocumentGroupId(L, m),
      s.withDocumentGroupId(S, m),
      s.withDocumentGroupId(R, m),
      s.withDocumentGroupId(f, m)
    ]),
    getUngroupedDocuments: e().resolves([
      s.with(h),
      s.with(U),
      s.with(N),
      s.with(F),
      s.with(M)
    ]),
    getDocumentsByDocumentGroupId: e().resolves([
      s.withDocumentGroupId(L, m),
      s.withDocumentGroupId(S, m),
      s.withDocumentGroupId(R, m),
      s.withDocumentGroupId(f, m)
    ]),
    getDocumentGroups: e().resolves([
      i.with(m, 3),
      i.with(ge, 0),
      i.with(he, 2)
    ]),
    getDocumentPagesByDocumentId: e().resolves([
      r.with(_),
      r.with(k),
      r.with(K),
      r.with(b),
      r.with(Y),
      r.with(B),
      r.with(Z)
    ]),
    getDocumentPagesByDocumentCategoryId: e().callsFake(
      (t) => Promise.resolve([
        r.withFields({ id: _, categoryId: t, sort: 1 }),
        r.withFields({ id: k, categoryId: t, sort: 2 }),
        r.withFields({ id: b, categoryId: t, sort: 3 }),
        r.withFields({ id: B, categoryId: t, sort: 4 })
      ])
    ),
    getDocumentCategoriesByDocumentId: e().callsFake(
      (t) => Promise.resolve([
        D.withDocumentIdAndNumberOfDocumentPages(y, t, 2),
        D.withDocumentIdAndNumberOfDocumentPages(_e, t, 0),
        D.withDocumentIdAndNumberOfDocumentPages(we, t, 2)
      ])
    ),
    getUncategorizedDocumentPagesByDocumentId: e().callsFake(
      (t) => Promise.resolve([
        r.withFields({
          id: K,
          documentId: t,
          categoryId: null,
          sort: 1
        }),
        r.withFields({
          id: Y,
          documentId: t,
          categoryId: null,
          sort: 2
        }),
        r.withFields({
          id: Z,
          documentId: t,
          categoryId: null,
          sort: 3
        })
      ])
    ),
    getDocumentSectionsByDocumentPageId: e().resolves([
      v.with(Ie),
      v.with(Te),
      v.with(pe)
    ]),
    getColorPalettes: e().resolves([
      P.with(678, "Palette 1"),
      P.with(427, "Palette 2"),
      P.with(679, "Palette 3")
    ]),
    getColorsByColorPaletteId: e().resolves([
      C.red(9834),
      C.green(342),
      C.yellow(9314)
    ]),
    duplicateDocumentPage: e().resolves(
      ce.with(ve)
    ),
    getDocumentTargets: e().resolves(
      me.with(h)
    ),
    getDocumentPageTargets: e().resolves(
      ie.with(_)
    ),
    addAssetIdsToCoverPageTemplateAssetKey: e().callsFake(async (t, o) => (c[t] = [...c[t] ?? [], ...o], u)),
    addAssetIdsToThemeAssetKey: e().callsFake(
      async (t, o) => (c[t] = [...c[t] ?? [], ...o], u)
    ),
    addAssetIdsToLibraryPageTemplateAssetKey: e().callsFake(async (t, o, a) => (c[o] = [...c[o] ?? [], ...a], u)),
    addAssetIdsToDocumentPageTemplateAssetKey: e().callsFake(async (t, o, a) => (c[o] = [...c[o] ?? [], ...a], u)),
    getCoverPageTemplateAssets: e().callsFake(I),
    getThemeAssets: e().callsFake(se),
    getLibraryPageTemplateAssets: e().callsFake(I),
    getDocumentPageTemplateAssets: e().callsFake(I),
    deleteAssetIdsFromCoverPageTemplateAssetKey: e().callsFake(async (t, o) => {
      l[t] = [...l[t] ?? [], ...o];
    }),
    deleteAssetIdsFromThemeAssetKey: e().callsFake(async (t, o) => {
      l[t] = [...l[t] ?? [], ...o];
    }),
    deleteAssetIdsFromLibraryPageTemplateAssetKey: e().callsFake(async (t, o, a) => {
      l[o] = [...l[o] ?? [], ...a];
    }),
    deleteAssetIdsFromDocumentPageTemplateAssetKey: e().callsFake(async (t, o, a) => {
      l[o] = [...l[o] ?? [], ...a];
    }),
    getCoverPageTemplateSettings: e().resolves(n),
    getDocumentPageTemplateSettings: e().resolves(n),
    getLibraryPageTemplateSettings: e().resolves(n),
    getThemeSettings: e().resolves(w),
    createLink: e().resolves(s.with(1)),
    createLibrary: e().resolves(s.with(1)),
    createStandardDocument: e().resolves(
      s.with(1)
    ),
    createDocumentPage: e().resolves(
      r.with(1)
    ),
    createDocumentGroup: e().resolves(
      i.with(1, 0)
    ),
    createDocumentCategory: e().resolves(
      D.with(1)
    ),
    createCoverPage: e().resolves(d.with(1)),
    updateLink: e().resolves(s.with(1)),
    updateLibrary: e().resolves(s.with(1)),
    updateStandardDocument: e().resolves(
      s.with(1)
    ),
    updateDocumentPage: e().resolves(
      r.with(1)
    ),
    updateDocumentGroup: e().resolves(
      i.with(1, 0)
    ),
    updateDocumentCategory: e().resolves(
      D.with(1)
    ),
    updateCoverPage: e().resolves(d.with(1)),
    updateLegacyCoverPage: e().resolves(
      d.withLegacy(1)
    ),
    updateBrandportalLink: e().resolves(
      O.with()
    ),
    updateCoverPageTemplateSettings: e().callsFake(async (t) => {
      n = g(n, t);
    }),
    updateDocumentPageTemplateSettings: e().callsFake(async (t) => {
      n = g(n, t);
    }),
    updateLibraryPageTemplateSettings: e().callsFake(async (t) => {
      n = g(n, t);
    }),
    updateThemeSettings: e().callsFake(
      async (t) => {
        w = g(w, t);
      }
    ),
    deleteCoverPage: e().resolves(),
    deleteDocumentCategory: e().resolves(),
    deleteDocumentGroup: e().resolves(),
    deleteDocumentPage: e().resolves(),
    deleteLibrary: e().resolves(),
    deleteLink: e().resolves(),
    deleteStandardDocument: e().resolves(),
    getBrandId: e().returns(J),
    getBrandportalLink: e().resolves(
      O.with()
    ),
    getTranslationLanguage: e().returns(q),
    moveDocument: e().resolves(s.with(h)),
    moveDocumentCategory: e().resolves(
      D.with(y)
    ),
    moveDocumentGroup: e().resolves(
      i.with(y, 0)
    ),
    moveDocumentPage: e().resolves(
      r.with(_)
    ),
    openNavigationManager: e(),
    updateDocumentPageTargets: e().resolves(
      A.with([$, j, x])
    ),
    updateDocumentTargets: e().resolves(
      A.with([$, j, x])
    ),
    searchInGuideline: e().callsFake(async (t) => Promise.resolve([
      p.with(`${t}-1`),
      p.with(`${t}-1`),
      p.with(`${t}-3`)
    ])),
    closeAssetChooser: e().callsFake(() => {
      te();
    }),
    openAssetChooser: e().callsFake((t) => {
      ee(t);
    }),
    api: e().resolves(),
    state: e().resolves(),
    context: e().resolves(),
    subscribe: e().resolves(),
    dispatch: e().resolves()
  };
};
export {
  ke as getAppBridgeThemeStub
};
//# sourceMappingURL=AppBridgeThemeStub.es.js.map
