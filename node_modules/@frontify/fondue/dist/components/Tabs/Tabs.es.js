import { jsxs as m, Fragment as K, jsx as l } from "react/jsx-runtime";
import { useRef as V, useState as y, Children as A, isValidElement as L, useCallback as U, useEffect as T, cloneElement as W } from "react";
import { merge as p } from "../../utilities/merge.es.js";
import { motion as H } from "framer-motion";
import { useFocusRing as Y } from "@react-aria/focus";
import { FOCUS_STYLE as _ } from "../../utilities/focusStyle.es.js";
import { useMemoizedId as q } from "../../hooks/useMemoizedId.es.js";
import G from "../../foundation/Icon/Generated/IconDotsHorizontal.es.js";
import { Badge as B } from "../Badge/Badge.es.js";
var J = /* @__PURE__ */ ((o) => (o.None = "None", o.XSmall = "XSmall", o.Small = "Small", o.Medium = "Medium", o.Large = "Large", o))(J || {}), P = /* @__PURE__ */ ((o) => (o.Small = "Small", o.Large = "Large", o))(P || {});
const Q = {
  None: "tw-pl-0",
  XSmall: "tw-pl-xs",
  Small: "tw-pl-s",
  Medium: "tw-pl-m",
  Large: "tw-pl-l"
}, Z = (o, g) => o.disabled ? "tw-text-text-disabled" : o.id === g ? "tw-font-medium tw-text-text" : "tw-text-text-weak hover:tw-text-text", X = ({
  paddingX: o,
  size: g,
  activeItemId: i,
  children: v,
  onChange: N,
  maxHeight: $,
  minHeight: C
}) => {
  const M = q(), k = V(null), [E, D] = y(!1), [w, c] = y(!1), x = A.map(v, (t) => L(t) ? t == null ? void 0 : t.props : null) ?? [], [F, R] = y([0]), a = U(() => {
    const t = k.current;
    D((t && t.scrollWidth > t.clientWidth) ?? !1);
    const r = [];
    if (t) {
      for (const e of t.children) {
        const s = [...t.children].indexOf(e), f = t.getBoundingClientRect(), u = e.getBoundingClientRect();
        (u.right > f.right || u.left < f.left) && r.push(s);
      }
      const n = [...r].sort((e, s) => e - s);
      R(n);
    }
  }, []), b = () => F.map((t) => x[t]), S = (t, r) => {
    const n = t.findIndex((e) => e.id === i);
    return t.filter((e, s) => r === "next" && s > n && !e.disabled || r === "previous" && s < n && !e.disabled ? e : !1);
  }, O = (t) => {
    t.stopPropagation();
    const r = b(), n = t.target, e = n.id.includes("-m"), s = n.id.replace("-btn-m", ""), f = e ? r : x, u = S(f, "next"), h = S(f, "previous");
    (t.key === "ArrowRight" || t.key === "ArrowDown") && u.length > 0 && d(u[0].id, e), (t.key === "ArrowLeft" || t.key === "ArrowUp") && h.length > 0 && d(h[h.length - 1].id, e), t.key === "Enter" && e && (d(s, !0), c(!1), document.getElementById(`${s}-content`).focus()), n.id.includes("-m") || c(!1);
  }, d = (t, r) => {
    try {
      const n = document.getElementById(`${t}-btn`), e = document.getElementById(
        r ? `${t}-btn-m` : `${t}-btn`
      );
      N && N(t), E && n.scrollIntoView({ behavior: "smooth", block: "end", inline: "end" }), e.focus();
    } catch (n) {
      throw n.message;
    }
  }, j = (t) => {
    a();
    const r = b();
    if (t.key === "Enter" && !w && r.length > 0) {
      const n = document.getElementById(`${r[0].id}-btn-m`);
      n && n.focus();
    }
    w && (t.key === "ArrowRight" || t.key === "ArrowDown") && d(r[0].id, !0);
  };
  T(() => {
    a();
  }, [a]), T(() => (window.addEventListener("resize", a), () => {
    window.removeEventListener("resize", a);
  }), [a]);
  const { isFocusVisible: I, focusProps: z } = Y();
  return /* @__PURE__ */ m(K, { children: [
    /* @__PURE__ */ m("div", { "data-test-id": "tabs", className: "tw-flex tw-relative tw-border-b tw-border-line", children: [
      /* @__PURE__ */ l(
        "div",
        {
          ref: k,
          role: "tablist",
          className: p([
            "tw-overflow-x-hidden tw-flex-shrink-0 tw-h-full tw-w-full tw-flex tw-justify-start",
            Q[
              o ?? "Small"
              /* Small */
            ],
            g === "Small" ? "tw-gap-xxs" : "tw-gap-xs "
          ]),
          children: x.map((t) => /* @__PURE__ */ m(
            "button",
            {
              "data-test-id": "tab-item",
              role: "tab",
              type: "button",
              "aria-selected": t.id === i,
              "aria-controls": `${t.id}-content`,
              "aria-hidden": t.disabled,
              tabIndex: t.id === i ? 0 : -1,
              id: `${t.id}-btn`,
              className: p([
                "tw-group tw-relative tw-mx-0 tw-py-4 tw-px-2 tw-w-max tw-cursor-pointer tw-flex tw-items-center tw-justify-center tw-whitespace-nowrap",
                Z(t, i)
              ]),
              onClick: () => {
                t.disabled || (d(t.id, !1), c(!1));
              },
              onKeyDown: (r) => O(r),
              children: [
                t.decorator && /* @__PURE__ */ l("span", { className: "tw-mr-1.5", children: t.decorator }),
                /* @__PURE__ */ l("span", { children: t.label }),
                t.badge && /* @__PURE__ */ l("span", { className: "tw-ml-1.5", children: /* @__PURE__ */ l(B, { disabled: t.disabled, style: t.badge.style, children: t.badge.children }) }),
                t.id === i && /* @__PURE__ */ l(
                  H.div,
                  {
                    initial: !1,
                    layoutDependency: i,
                    "data-test-id": "tab-active-highlight",
                    layoutId: M,
                    className: "tw-absolute tw-h-[3px] tw-bg-box-selected-strong tw-rounded-t-x-large tw-w-full tw-bottom-0"
                  }
                )
              ]
            },
            t.id
          ))
        }
      ),
      E && /* @__PURE__ */ m(
        "div",
        {
          "data-test-id": "tab-overflow",
          className: "tw-absolute tw-z-50 tw-right-3 tw-bottom-0 tw-top-0 tw-flex tw-justify-center tw-items-center",
          children: [
            /* @__PURE__ */ l(
              "button",
              {
                className: p([
                  "tw-w-6 tw-h-6 tw-bg-box-neutral tw-rounded tw-flex tw-justify-center tw-items-center",
                  I ? _ : ""
                ]),
                type: "button",
                onClick: () => {
                  a(), c(!w);
                },
                onKeyDown: (t) => j(t),
                ...z,
                children: /* @__PURE__ */ l(G, {})
              }
            ),
            w && /* @__PURE__ */ l(
              "div",
              {
                className: "tw-absolute tw-right-0 tw-top-11 tw-px-3 tw-pt-3 tw-bg-base tw-shadow tw-w-max",
                role: "dialog",
                children: b().map((t) => {
                  var r, n;
                  return /* @__PURE__ */ m(
                    "button",
                    {
                      className: p([
                        "tw-flex tw-items-center tw-w-full tw-mb-3 tw-text-left tw-text-text-weak",
                        t.disabled && "tw-text-text-disabled"
                      ]),
                      onClick: () => {
                        t.disabled || (d(t.id, !0), c(!1));
                      },
                      role: "tab",
                      type: "button",
                      "aria-selected": t.id === i,
                      "aria-controls": `${t.id}-content`,
                      "aria-hidden": t.disabled,
                      tabIndex: !t.disabled && w ? 0 : -1,
                      id: `${t.id}-btn-m`,
                      onKeyDown: (e) => O(e),
                      children: [
                        t.decorator,
                        /* @__PURE__ */ l("span", { className: "tw-mr-1 tw-ml-1.5", children: t.label }),
                        t.badge && /* @__PURE__ */ l(B, { disabled: t.disabled, style: (r = t.badge) == null ? void 0 : r.style, children: (n = t.badge) == null ? void 0 : n.children })
                      ]
                    },
                    t.id
                  );
                })
              }
            )
          ]
        }
      )
    ] }),
    /* @__PURE__ */ l("div", { "data-test-id": "tab-content", className: "tw-flex tw-flex-col tw-overflow-y-auto", children: /* @__PURE__ */ l("div", { className: "tw-mr-0", style: { maxHeight: $, minHeight: C }, children: A.map(v, (t) => L(t) ? W(t, { ...t.props, active: t.props.id === i }) : null) }) })
  ] });
};
X.displayName = "FondueTabs";
export {
  P as TabSize,
  X as Tabs,
  J as TabsPaddingX
};
//# sourceMappingURL=Tabs.es.js.map
