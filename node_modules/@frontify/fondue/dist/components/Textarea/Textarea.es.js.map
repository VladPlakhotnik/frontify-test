{"version":3,"file":"Textarea.es.js","sources":["../../../src/components/Textarea/Textarea.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { useMemoizedId } from '@hooks/useMemoizedId';\nimport { useFocusRing } from '@react-aria/focus';\nimport { mergeProps } from '@react-aria/utils';\nimport { FOCUS_STYLE } from '@utilities/focusStyle';\nimport { merge } from '@utilities/merge';\nimport { Validation, validationClassMap } from '@utilities/validation';\nimport { LoadingCircle, LoadingCircleSize } from '@components/LoadingCircle';\nimport { FocusEvent, FormEvent, KeyboardEvent, ReactElement, ReactNode, useEffect, useRef } from 'react';\nimport TextareaAutosize, { TextareaAutosizeProps } from 'react-textarea-autosize';\nimport { IconExclamationMarkTriangle } from '@foundation/Icon/Generated';\n\nexport type TextareaProps = {\n    id?: string;\n    value?: string;\n    required?: boolean;\n    decorator?: ReactNode;\n    placeholder?: string;\n    disabled?: boolean;\n    onInput?: (value: string) => void;\n    onBlur?: (value: string) => void;\n    onFocus?: (e: FocusEvent<HTMLTextAreaElement>) => void;\n    validation?: Validation;\n    /** When autosize if false, this is used as 'rows' property for standard textarea */\n    minRows?: number;\n    /** When autosize if false, this property is ignored */\n    maxRows?: number;\n    autosize?: boolean;\n    resizeable?: boolean;\n    selectable?: boolean;\n    focusOnMount?: boolean;\n    onEnterPressed?: (event: KeyboardEvent<HTMLTextAreaElement>) => void;\n};\n\nexport const Textarea = ({\n    id: propId,\n    value,\n    required = false,\n    decorator,\n    placeholder,\n    disabled = false,\n    onInput,\n    onBlur,\n    validation = Validation.Default,\n    minRows,\n    maxRows,\n    autosize = false,\n    resizeable = true,\n    onFocus,\n    selectable = false,\n    focusOnMount,\n    onEnterPressed,\n}: TextareaProps): ReactElement => {\n    const Component = autosize ? TextareaAutosize : 'textarea';\n\n    const textareaElement = useRef<HTMLTextAreaElement | null>(null);\n\n    useEffect(() => {\n        focusOnMount && textareaElement.current?.focus();\n    }, [focusOnMount]);\n\n    const onKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.key === 'Enter') {\n            onEnterPressed?.(event);\n        }\n    };\n\n    const { isFocusVisible, focusProps } = useFocusRing({ isTextInput: true });\n\n    const autosizeProps = { maxRows, minRows };\n\n    return (\n        <div className=\"tw-relative\">\n            {decorator && (\n                <div\n                    className=\"tw-absolute tw-top-2 tw-left-2 tw-inline-flex tw-items-end tw-text-black-80\"\n                    data-test-id=\"decorator\"\n                >\n                    {decorator}\n                </div>\n            )}\n            <Component\n                {...(mergeProps(focusProps, {\n                    onBlur: (event: FocusEvent<HTMLTextAreaElement>) => onBlur && onBlur(event.target.value),\n                    onInput: (event: FormEvent<HTMLTextAreaElement>) =>\n                        onInput && onInput((event.target as HTMLTextAreaElement).value),\n                }) as TextareaAutosizeProps)}\n                {...(autosize ? autosizeProps : { rows: minRows })}\n                id={useMemoizedId(propId)}\n                ref={textareaElement}\n                value={value}\n                placeholder={placeholder}\n                required={required}\n                className={merge([\n                    'tw-w-full tw-p-2 tw-border tw-rounded tw-text-s tw-outline-none tw-transition tw-placeholder-black-60',\n                    !!decorator && 'tw-pl-7 ',\n                    disabled\n                        ? 'tw-border-black-5 tw-bg-black-5 tw-text-black-40'\n                        : 'tw-text-black tw-border-black-20 hover:tw-border-line-x-strong',\n                    isFocusVisible && FOCUS_STYLE,\n                    validationClassMap[validation],\n                    !resizeable && 'tw-resize-none',\n                    validation === Validation.Error && 'tw-pr-8',\n                ])}\n                disabled={disabled}\n                onFocus={(e) => {\n                    if (selectable) {\n                        e.target.select();\n                    }\n                    if (onFocus) {\n                        onFocus(e);\n                    }\n                }}\n                onKeyDown={onKeyDown}\n                data-test-id=\"textarea\"\n            />\n            {validation === Validation.Loading && (\n                <span className=\"tw-absolute tw-top-[-0.55rem] tw-right-[-0.55rem] tw-bg-white tw-rounded-full tw-p-[2px] tw-border tw-border-black-10\">\n                    <LoadingCircle size={LoadingCircleSize.ExtraSmall} />\n                </span>\n            )}\n            {(validation === Validation.Error || validation === Validation.Warning) && (\n                <span\n                    className={merge([\n                        'tw-absolute tw-top-[0.6rem] tw-right-[0.6rem]',\n                        validation === Validation.Error && 'tw-text-text-negative',\n                        validation === Validation.Warning && 'tw-text-text-warning',\n                    ])}\n                    data-test-id=\"error-state-exclamation-mark-icon\"\n                >\n                    <IconExclamationMarkTriangle />\n                </span>\n            )}\n        </div>\n    );\n};\nTextarea.displayName = 'FondueTextarea';\n"],"names":["Textarea","propId","value","required","decorator","placeholder","disabled","onInput","onBlur","validation","Validation","minRows","maxRows","autosize","resizeable","onFocus","selectable","focusOnMount","onEnterPressed","Component","TextareaAutosize","textareaElement","useRef","useEffect","_a","onKeyDown","event","isFocusVisible","focusProps","useFocusRing","autosizeProps","jsxs","jsx","mergeProps","useMemoizedId","merge","FOCUS_STYLE","validationClassMap","e","LoadingCircle","LoadingCircleSize","IconExclamationMarkTriangle"],"mappings":";;;;;;;;;;;AAmCO,MAAMA,IAAW,CAAC;AAAA,EACrB,IAAIC;AAAA,EACJ,OAAAC;AAAA,EACA,UAAAC,IAAW;AAAA,EACX,WAAAC;AAAA,EACA,aAAAC;AAAA,EACA,UAAAC,IAAW;AAAA,EACX,SAAAC;AAAA,EACA,QAAAC;AAAA,EACA,YAAAC,IAAaC,EAAW;AAAA,EACxB,SAAAC;AAAA,EACA,SAAAC;AAAA,EACA,UAAAC,IAAW;AAAA,EACX,YAAAC,IAAa;AAAA,EACb,SAAAC;AAAA,EACA,YAAAC,IAAa;AAAA,EACb,cAAAC;AAAA,EACA,gBAAAC;AACJ,MAAmC;AACzB,QAAAC,IAAYN,IAAWO,IAAmB,YAE1CC,IAAkBC,EAAmC,IAAI;AAE/D,EAAAC,EAAU,MAAM;;AACI,IAAAN,OAAAO,IAAAH,EAAgB,YAAhB,QAAAG,EAAyB;AAAA,EAAM,GAChD,CAACP,CAAY,CAAC;AAEX,QAAAQ,IAAY,CAACC,MAA8C;AACzD,IAAAA,EAAM,QAAQ,YACdR,KAAA,QAAAA,EAAiBQ;AAAA,EACrB,GAGE,EAAE,gBAAAC,GAAgB,YAAAC,EAAW,IAAIC,EAAa,EAAE,aAAa,IAAM,GAEnEC,IAAgB,EAAE,SAAAlB,GAAS,SAAAD;AAG7B,SAAA,gBAAAoB,EAAC,OAAI,EAAA,WAAU,eACV,UAAA;AAAA,IACG3B,KAAA,gBAAA4B;AAAA,MAAC;AAAA,MAAA;AAAA,QACG,WAAU;AAAA,QACV,gBAAa;AAAA,QAEZ,UAAA5B;AAAA,MAAA;AAAA,IACL;AAAA,IAEJ,gBAAA4B;AAAA,MAACb;AAAA,MAAA;AAAA,QACI,GAAIc,EAAWL,GAAY;AAAA,UACxB,QAAQ,CAACF,MAA2ClB,KAAUA,EAAOkB,EAAM,OAAO,KAAK;AAAA,UACvF,SAAS,CAACA,MACNnB,KAAWA,EAASmB,EAAM,OAA+B,KAAK;AAAA,QAAA,CACrE;AAAA,QACA,GAAIb,IAAWiB,IAAgB,EAAE,MAAMnB,EAAQ;AAAA,QAChD,IAAIuB,EAAcjC,CAAM;AAAA,QACxB,KAAKoB;AAAA,QACL,OAAAnB;AAAA,QACA,aAAAG;AAAA,QACA,UAAAF;AAAA,QACA,WAAWgC,EAAM;AAAA,UACb;AAAA,UACA,CAAC,CAAC/B,KAAa;AAAA,UACfE,IACM,qDACA;AAAA,UACNqB,KAAkBS;AAAA,UAClBC,EAAmB5B,CAAU;AAAA,UAC7B,CAACK,KAAc;AAAA,UACfL,MAAeC,EAAW,SAAS;AAAA,QAAA,CACtC;AAAA,QACD,UAAAJ;AAAA,QACA,SAAS,CAACgC,MAAM;AACZ,UAAItB,KACAsB,EAAE,OAAO,UAETvB,KACAA,EAAQuB,CAAC;AAAA,QAEjB;AAAA,QACA,WAAAb;AAAA,QACA,gBAAa;AAAA,MAAA;AAAA,IACjB;AAAA,IACChB,MAAeC,EAAW,WACvB,gBAAAsB,EAAC,QAAK,EAAA,WAAU,yHACZ,UAAA,gBAAAA,EAACO,GAAc,EAAA,MAAMC,EAAkB,WAAY,CAAA,GACvD;AAAA,KAEF/B,MAAeC,EAAW,SAASD,MAAeC,EAAW,YAC3D,gBAAAsB;AAAA,MAAC;AAAA,MAAA;AAAA,QACG,WAAWG,EAAM;AAAA,UACb;AAAA,UACA1B,MAAeC,EAAW,SAAS;AAAA,UACnCD,MAAeC,EAAW,WAAW;AAAA,QAAA,CACxC;AAAA,QACD,gBAAa;AAAA,QAEb,4BAAC+B,GAA4B,EAAA;AAAA,MAAA;AAAA,IACjC;AAAA,EAER,EAAA,CAAA;AAER;AACAzC,EAAS,cAAc;"}