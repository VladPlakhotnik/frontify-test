import { jsxs as L, jsx as a } from "react/jsx-runtime";
import { useMemoizedId as S } from "../../hooks/useMemoizedId.es.js";
import { useFocusRing as y } from "@react-aria/focus";
import { mergeProps as I } from "@react-aria/utils";
import { FOCUS_STYLE as j } from "../../utilities/focusStyle.es.js";
import { merge as u } from "../../utilities/merge.es.js";
import { validationClassMap as D, Validation as r } from "../../utilities/validation.es.js";
import { useRef as M, useEffect as V } from "react";
import W from "react-textarea-autosize";
import v from "../../foundation/Icon/Generated/IconExclamationMarkTriangle.es.js";
import { LoadingCircle as A, LoadingCircleSize as K } from "../LoadingCircle/LoadingCircle.es.js";
const R = ({
  id: x,
  value: d,
  required: b = !1,
  decorator: o,
  placeholder: g,
  disabled: l = !1,
  onInput: s,
  onBlur: m,
  validation: e = r.Default,
  minRows: w,
  maxRows: k,
  autosize: n = !1,
  resizeable: h = !0,
  onFocus: c,
  selectable: N = !1,
  focusOnMount: p,
  onEnterPressed: i
}) => {
  const T = n ? W : "textarea", f = M(null);
  V(() => {
    var t;
    p && ((t = f.current) == null || t.focus());
  }, [p]);
  const z = (t) => {
    t.key === "Enter" && (i == null || i(t));
  }, { isFocusVisible: C, focusProps: E } = y({ isTextInput: !0 }), F = { maxRows: k, minRows: w };
  return /* @__PURE__ */ L("div", { className: "tw-relative", children: [
    o && /* @__PURE__ */ a(
      "div",
      {
        className: "tw-absolute tw-top-2 tw-left-2 tw-inline-flex tw-items-end tw-text-black-80",
        "data-test-id": "decorator",
        children: o
      }
    ),
    /* @__PURE__ */ a(
      T,
      {
        ...I(E, {
          onBlur: (t) => m && m(t.target.value),
          onInput: (t) => s && s(t.target.value)
        }),
        ...n ? F : { rows: w },
        id: S(x),
        ref: f,
        value: d,
        placeholder: g,
        required: b,
        className: u([
          "tw-w-full tw-p-2 tw-border tw-rounded tw-text-s tw-outline-none tw-transition tw-placeholder-black-60",
          !!o && "tw-pl-7 ",
          l ? "tw-border-black-5 tw-bg-black-5 tw-text-black-40" : "tw-text-black tw-border-black-20 hover:tw-border-line-x-strong",
          C && j,
          D[e],
          !h && "tw-resize-none",
          e === r.Error && "tw-pr-8"
        ]),
        disabled: l,
        onFocus: (t) => {
          N && t.target.select(), c && c(t);
        },
        onKeyDown: z,
        "data-test-id": "textarea"
      }
    ),
    e === r.Loading && /* @__PURE__ */ a("span", { className: "tw-absolute tw-top-[-0.55rem] tw-right-[-0.55rem] tw-bg-white tw-rounded-full tw-p-[2px] tw-border tw-border-black-10", children: /* @__PURE__ */ a(A, { size: K.ExtraSmall }) }),
    (e === r.Error || e === r.Warning) && /* @__PURE__ */ a(
      "span",
      {
        className: u([
          "tw-absolute tw-top-[0.6rem] tw-right-[0.6rem]",
          e === r.Error && "tw-text-text-negative",
          e === r.Warning && "tw-text-text-warning"
        ]),
        "data-test-id": "error-state-exclamation-mark-icon",
        children: /* @__PURE__ */ a(v, {})
      }
    )
  ] });
};
R.displayName = "FondueTextarea";
export {
  R as Textarea
};
//# sourceMappingURL=Textarea.es.js.map
