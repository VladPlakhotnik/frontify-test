{"version":3,"file":"EditableText.es.js","sources":["../../../src/components/EditableText/EditableText.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport {\n    ChangeEvent,\n    FocusEvent,\n    FocusEventHandler,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    ReactElement,\n    cloneElement,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { EditableTextHelper } from '@components/EditableText/lib/helper';\nimport { FOCUS_VISIBLE_STYLE } from '@utilities/focusStyle';\nimport { merge } from '@utilities/merge';\n\nexport enum EditableMode {\n    INPUT = 'INPUT',\n    LABEL = 'LABEL',\n}\n\ninterface InputStyling {\n    fontSize: string;\n    lineHeight: string;\n    letterSpacing: string;\n    minWidth: string;\n    fontWeight: string;\n}\n\n/**\n * isSlimInputField: removes padding\n * mode: display as Input or Label first\n * enableDoubleClick: Should the input be triggered by a double click or single click\n * additionalValues: additional information to be passed via onClick Event\n * removeBoxPadding: Removes the Padding (tw-p-2) around the input Box\n */\ninterface EditableOptionProps {\n    isSlimInputField?: boolean;\n    mode?: EditableMode;\n    enableDoubleClick?: boolean;\n    additionalValues?: string;\n    removeBoxPadding?: boolean;\n}\n\n/**\n * Add Children with badges or icons\n * onEditableSave callback to get updated Value\n * onAdditionalValueSave callback with more information (ex. ID)\n * onModeChange callback when state changes\n * options to specify styling and additional behaviours\n */\nexport interface EditableTextProps {\n    children?: ReactElement;\n    onAdditionalValueSave?: (additionalValue: string, value: string) => void;\n    onEditableSave?: (value: string) => void;\n    onModeChange?: (editableState?: EditableMode) => void;\n    options?: EditableOptionProps;\n    /** @deprecated Temporary solution for text with ellipisis in Tree Component */\n    isOverflowing?: boolean;\n    'data-test-id'?: string;\n}\n\n/**\n * Component to switch between Label and Input state. Wraps the Children\n * with a Button, to allow for accessibility and copies styles to input field\n *\n * Events:\n * - onEditableSave         // When changing from input to label state\n * - onModeChange           // Indicates which state is active\n * - onAdditionalValueSave  // Similar to editable Save with additional Values provided\n *\n * Options properties:\n * - mode:                   enum EditableMode  // {INPUT = 'INPUT',LABEL = 'LABEL'}\n * - enableDoubleClick:      boolean            // should the input be triggered by a double click or single click\n * - isSlimInputField:       boolean            // removes y padding\n * - additionalValues?:      string             // additional Values like ID\n *\n */\nexport const EditableText = ({\n    onEditableSave,\n    onModeChange,\n    onAdditionalValueSave,\n    children,\n    options,\n    isOverflowing = false,\n    'data-test-id': dataTestId = 'editable-node-container',\n}: EditableTextProps) => {\n    // Read initial text strings from children\n    const childrenLabel = EditableTextHelper.getLabel(children);\n\n    // use text strings from children in the input field\n    const [inputValue, setInputValue] = useState(childrenLabel);\n    const [editableState, setEditableState] = useState<EditableMode>(EditableMode.LABEL);\n    const [inputStyling, setInputStyling] = useState<InputStyling>();\n\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => setInputValue(event.target.value);\n\n    const handleSwitchToLabel = (event: KeyboardEvent | FocusEvent) => {\n        setEditableState(EditableMode.LABEL);\n\n        onModeChange && onModeChange(EditableMode.LABEL);\n        options?.additionalValues &&\n            onAdditionalValueSave &&\n            onAdditionalValueSave(options.additionalValues, (event.target as HTMLTextAreaElement).value);\n        onEditableSave && onEditableSave((event.target as HTMLTextAreaElement).value);\n    };\n\n    const handleSwitchToInput = (childrenText: string) => () => {\n        setInputValue(childrenText);\n        setEditableState(EditableMode.INPUT);\n        onModeChange && onModeChange(EditableMode.INPUT);\n    };\n\n    const handleKeyDown: KeyboardEventHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            handleSwitchToLabel(event);\n        }\n    };\n    const handleBlur: FocusEventHandler = (event: FocusEvent<HTMLTextAreaElement>) => handleSwitchToLabel(event);\n\n    // Set initial state of component if provided in the mode\n    useEffect(() => setEditableState(options?.mode ?? EditableMode.LABEL), [options?.mode]);\n\n    const clickBehaviour = options?.enableDoubleClick\n        ? {\n              onDoubleClick: handleSwitchToInput(childrenLabel),\n              onKeyPress: (event: KeyboardEvent) => event.key === 'Enter' && handleSwitchToInput(childrenLabel)(),\n          }\n        : {\n              onClick: handleSwitchToInput(childrenLabel),\n          };\n\n    // Update Input Style and select input field if visible\n    useEffect(() => {\n        if (childRef.current) {\n            setInputStyling(EditableTextHelper.copyStyles(childRef.current));\n        }\n\n        if (editableState === EditableMode.INPUT) {\n            inputRef.current?.select();\n        }\n    }, [editableState, inputRef, children]);\n\n    const childRef = useRef();\n\n    // Clone Child and add ref to Children\n    const ChildrenWithRef =\n        children &&\n        cloneElement(children, {\n            ref: childRef,\n        });\n\n    return (\n        <div\n            data-test-id={dataTestId}\n            className={merge(['tw-relative tw-h-full', options?.removeBoxPadding === true ? '' : 'tw-p-2'])}\n        >\n            {editableState === EditableMode.INPUT ? (\n                <div\n                    className={merge([\n                        'tw-flex tw-items-center',\n                        options?.isSlimInputField === true\n                            ? '-tw-translate-x-[0.315rem] -tw-translate-y-[0.07rem]'\n                            : '-tw-translate-x-[0.81rem] -tw-translate-y-[0.56rem]',\n                    ])}\n                >\n                    <div\n                        data-test-id=\"editable-input\"\n                        className={merge(['tw-relative', isOverflowing && 'tw-w-full tw-flex tw-items-center'])}\n                    >\n                        <input\n                            ref={inputRef}\n                            type=\"text\"\n                            className={merge([\n                                options?.isSlimInputField === true\n                                    ? 'focus-visible:tw-outline-none'\n                                    : FOCUS_VISIBLE_STYLE,\n                                'tw-absolute tw-w-full tw-text-text tw-border tw-rounded tw-bg-base tw-border-solid',\n                                options?.isSlimInputField === true ? 'tw-py-0 tw-px-1' : 'tw-px-3 tw-py-2',\n                            ])}\n                            style={inputStyling}\n                            value={inputValue}\n                            onChange={handleInputChange}\n                            onKeyDown={handleKeyDown}\n                            onBlur={handleBlur}\n                        />\n                        <span\n                            aria-hidden=\"true\"\n                            className={merge([\n                                'tw-rounded tw-px-4 tw-py-2 tw-bg-base tw-truncate',\n                                options?.isSlimInputField === true && 'tw-py-0 tw-px-2',\n                                isOverflowing && 'tw-w-0',\n                            ])}\n                            style={inputStyling}\n                        >\n                            {inputValue}\n                        </span>\n                    </div>\n                </div>\n            ) : null}\n            <button\n                style={{ display: editableState === EditableMode.INPUT ? 'none' : 'flex' }}\n                className={merge([isOverflowing && 'tw-w-full', 'tw-h-full tw-items-center', FOCUS_VISIBLE_STYLE])}\n                {...clickBehaviour}\n                data-test-id={'node-link-name'}\n                aria-pressed=\"false\"\n            >\n                {ChildrenWithRef}\n            </button>\n        </div>\n    );\n};\nEditableText.displayName = 'FondueEditableText';\n"],"names":["EditableMode","EditableText","onEditableSave","onModeChange","onAdditionalValueSave","children","options","isOverflowing","dataTestId","childrenLabel","EditableTextHelper","inputValue","setInputValue","useState","editableState","setEditableState","inputStyling","setInputStyling","inputRef","useRef","handleInputChange","event","handleSwitchToLabel","handleSwitchToInput","childrenText","handleKeyDown","handleBlur","useEffect","clickBehaviour","childRef","_a","ChildrenWithRef","cloneElement","jsxs","merge","jsx","FOCUS_VISIBLE_STYLE"],"mappings":"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"}