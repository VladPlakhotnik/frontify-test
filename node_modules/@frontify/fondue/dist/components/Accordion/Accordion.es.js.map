{"version":3,"file":"Accordion.es.js","sources":["../../../src/components/Accordion/Accordion.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { CollapsibleWrap } from '@components/CollapsibleWrap';\nimport { useAccordion, useAccordionItem } from '@react-aria/accordion';\nimport { useFocusRing } from '@react-aria/focus';\nimport { mergeProps } from '@react-aria/utils';\nimport { Item as StatelyItem } from '@react-stately/collections';\nimport { useTreeState } from '@react-stately/tree';\nimport { FOCUS_STYLE_INSET } from '@utilities/focusStyle';\nimport { merge } from '@utilities/merge';\nimport { Children, Key, KeyboardEvent, ReactElement, ReactNode, isValidElement, useEffect, useRef } from 'react';\nimport { AccordionHeader } from './AccordionHeader';\nimport { AccordionItemProps, AccordionProps, AriaAccordionItemProps } from './types';\n\nconst ACCORDION_ID = 'fondue-accordion';\nconst ACCORDION_ITEM_ID = 'fondue-accordion-item';\n\nconst AriaAccordionItem = ({\n    item,\n    state,\n    header,\n    padding = true,\n    divider = false,\n    headerComponent: HeaderComponent = AccordionHeader,\n    'data-test-id': dataTestId = ACCORDION_ITEM_ID,\n}: AriaAccordionItemProps): ReactElement => {\n    const { active, ...headerProps } = header;\n    const triggerRef = useRef<HTMLButtonElement | null>(null);\n    const { buttonProps, regionProps } = useAccordionItem({ item }, state, triggerRef);\n    const isOpen = state.expandedKeys.has(item.key);\n    const { isFocusVisible, focusProps } = useFocusRing();\n\n    return (\n        <div\n            key={item.key}\n            className={merge([isFocusVisible ? FOCUS_STYLE_INSET : '', divider && 'tw-divide-y tw-divide-black-10'])}\n        >\n            <button\n                {...mergeProps(buttonProps, focusProps)}\n                data-test-id={dataTestId}\n                ref={triggerRef}\n                onClick={(event) => {\n                    if (header.onClick) {\n                        header.onClick();\n                    }\n\n                    if (buttonProps.onClick) {\n                        buttonProps.onClick(event);\n                    }\n                }}\n                onKeyUp={(event) => {\n                    if (header.onClick && event.key === 'Enter') {\n                        header.onClick();\n                    }\n\n                    if (buttonProps.onKeyUp) {\n                        buttonProps.onKeyUp(event);\n                    }\n                }}\n                className=\"tw-w-full focus-visible:tw-outline-none\"\n            >\n                <HeaderComponent isOpen={isOpen} {...headerProps} />\n            </button>\n            <CollapsibleWrap isOpen={isOpen} preventInitialAnimation={active}>\n                <div {...regionProps} className={merge([padding && 'tw-px-8 tw-pb-6'])}>\n                    {item.props.children?.()}\n                </div>\n            </CollapsibleWrap>\n        </div>\n    );\n};\n\nconst mapToAriaProps = (children: ReactElement<AccordionItemProps>[]) => {\n    const ariaChildren = Children.map(children, (child, index) => {\n        const { header, children } = child.props;\n\n        return (\n            <StatelyItem key={index} textValue={header.children}>\n                {children ? ((() => children) as unknown as ReactNode) : null}\n            </StatelyItem>\n        );\n    });\n\n    const defaultExpandedKeys = (ariaChildren\n        .map((item) => item.key)\n        .filter((key, index) => key && !!children[index]?.props.header?.active) || []) as Key[];\n\n    return { children: ariaChildren, defaultExpandedKeys };\n};\n\nconst filterValidChildren = ({ children }: AccordionProps): ReactElement<AccordionItemProps>[] =>\n    Children.toArray(children).reduce<ReactElement<AccordionItemProps>[]>((validChildren, child) => {\n        if (isValidElement(child) && !child.props.header) {\n            console.warn('Use `AccordionItem` as children of `Accordion` and set the `header` prop accordingly.');\n            return validChildren;\n        }\n\n        if (isValidElement(child)) {\n            validChildren.push(child as ReactElement<AccordionItemProps>);\n        }\n\n        return validChildren;\n    }, []);\n\n// eslint-disable-next-line react/jsx-no-useless-fragment\nexport const AccordionItem = ({ children }: AccordionItemProps): ReactElement => <>{children}</>;\nAccordionItem.displayName = 'FondueAccordionItem';\n\nconst lastChildrenActive = (children: ReactNode | undefined): boolean | undefined => {\n    const childrenArray = Children.toArray(children) as { key: string; props?: { header?: { active?: boolean } } }[];\n    return childrenArray[childrenArray.length - 1]?.props?.header?.active === true;\n};\n\nexport const Accordion = (props: AccordionProps): ReactElement => {\n    const { divider = true, border = true, 'data-test-id': dataTestId = ACCORDION_ID } = props;\n    const children = filterValidChildren(props);\n    const ariaProps = mapToAriaProps(children);\n\n    const ref = useRef<HTMLDivElement | null>(null);\n    const state = useTreeState<AccordionItemProps>(ariaProps);\n\n    // We need to detect the firstRender and childrenLength to not toggle any panel\n    const accordionChildren = useRef({ firstRender: true, childLength: Children.toArray(props.children).length });\n    const childrenLength = Children.toArray(props.children).length;\n    useEffect(() => {\n        /**\n         * Checks if the last child in the Array is active\n         * Only works when adding Children to end of Accordion\n         */\n        const childrenIsActive = lastChildrenActive(props.children);\n        if (\n            !!childrenIsActive &&\n            !accordionChildren.current.firstRender &&\n            Children.toArray(props.children).length > accordionChildren.current.childLength\n        ) {\n            state.toggleKey(ariaProps.defaultExpandedKeys[ariaProps.defaultExpandedKeys.length - 1]);\n        }\n        accordionChildren.current = { firstRender: false, childLength: Children.toArray(props.children).length };\n    }, [ariaProps.defaultExpandedKeys, childrenLength, props.children, state]);\n\n    const {\n        // @react-aria prevents default action for onMouseDown as implemented here: https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/selection/src/useSelectableCollection.ts#L370\n        // This makes it impossible to edit or select text in input fields inside the accordion\n        // onKeydown automatically navigates away from child elements, including dropdown menus etc.\n        // Focus should only be passed if the accordion item itself is focused\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        accordionProps: { onMouseDown, onKeyDown, ...accordionProps },\n        // @react-aria enable by default typeahead which result in an event fired up on keypress and select the section\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        //@ts-ignore\n    } = useAccordion({ ...ariaProps, disallowTypeAhead: true }, state, ref);\n\n    const accordionKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n        const key = (event.target as HTMLButtonElement).dataset.key;\n        const isFocused = state.selectionManager.focusedKey === key;\n        if (key && isFocused) {\n            onKeyDown && onKeyDown(event);\n        }\n    };\n\n    const propsWithModifiedKeyDown = { ...accordionProps, onKeyDown: accordionKeyDown };\n\n    return (\n        <div\n            {...propsWithModifiedKeyDown}\n            ref={ref}\n            data-test-id={dataTestId}\n            className={merge([\n                divider && 'tw-divide-y tw-divide-black-10',\n                border && 'tw-border-t tw-border-b tw-border-black-10',\n            ])}\n        >\n            {[...state.collection].map((item, index) => {\n                const {\n                    header,\n                    padding,\n                    headerComponent,\n                    divider,\n                    'data-test-id': itemDataTestId = ACCORDION_ITEM_ID,\n                } = children[index].props;\n                return (\n                    <AriaAccordionItem\n                        key={item.key}\n                        item={item}\n                        state={state}\n                        divider={divider}\n                        header={header}\n                        padding={padding}\n                        headerComponent={headerComponent}\n                        data-test-id={itemDataTestId}\n                    />\n                );\n            })}\n        </div>\n    );\n};\nAccordion.displayName = 'FondueAccordion';\n"],"names":["ACCORDION_ID","ACCORDION_ITEM_ID","AriaAccordionItem","item","state","header","padding","divider","HeaderComponent","AccordionHeader","dataTestId","active","headerProps","triggerRef","useRef","buttonProps","regionProps","useAccordionItem","isOpen","isFocusVisible","focusProps","useFocusRing","jsxs","merge","FOCUS_STYLE_INSET","jsx","mergeProps","event","CollapsibleWrap","mapToAriaProps","children","ariaChildren","Children","child","index","StatelyItem","defaultExpandedKeys","key","_b","_a","filterValidChildren","validChildren","isValidElement","AccordionItem","lastChildrenActive","childrenArray","_c","Accordion","props","border","ariaProps","ref","useTreeState","accordionChildren","childrenLength","useEffect","onMouseDown","onKeyDown","accordionProps","useAccordion","propsWithModifiedKeyDown","isFocused","headerComponent","itemDataTestId"],"mappings":"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"}