import { jsx as l, Fragment as E, jsxs as N } from "react/jsx-runtime";
import { useAccordion as P, useAccordionItem as R } from "@react-aria/accordion";
import { useFocusRing as T } from "@react-aria/focus";
import { mergeProps as F } from "@react-aria/utils";
import { Item as O } from "@react-stately/collections";
import { useTreeState as L } from "@react-stately/tree";
import { FOCUS_STYLE_INSET as U } from "../../utilities/focusStyle.es.js";
import { merge as w } from "../../utilities/merge.es.js";
import { useRef as C, Children as u, useEffect as _, isValidElement as I } from "react";
import { AccordionHeader as M } from "./AccordionHeader.es.js";
import { CollapsibleWrap as S } from "../CollapsibleWrap/CollapsibleWrap.es.js";
const V = "fondue-accordion", v = "fondue-accordion-item", j = ({
  item: e,
  state: o,
  header: r,
  padding: t = !0,
  divider: i = !1,
  headerComponent: n = M,
  "data-test-id": c = v
}) => {
  var d, p;
  const { active: s, ...f } = r, m = C(null), { buttonProps: h, regionProps: y } = R({ item: e }, o, m), A = o.expandedKeys.has(e.key), { isFocusVisible: k, focusProps: g } = T();
  return /* @__PURE__ */ N(
    "div",
    {
      className: w([k ? U : "", i && "tw-divide-y tw-divide-black-10"]),
      children: [
        /* @__PURE__ */ l(
          "button",
          {
            ...F(h, g),
            "data-test-id": c,
            ref: m,
            onClick: (a) => {
              r.onClick && r.onClick(), h.onClick && h.onClick(a);
            },
            onKeyUp: (a) => {
              r.onClick && a.key === "Enter" && r.onClick(), h.onKeyUp && h.onKeyUp(a);
            },
            className: "tw-w-full focus-visible:tw-outline-none",
            children: /* @__PURE__ */ l(n, { isOpen: A, ...f })
          }
        ),
        /* @__PURE__ */ l(S, { isOpen: A, preventInitialAnimation: s, children: /* @__PURE__ */ l("div", { ...y, className: w([t && "tw-px-8 tw-pb-6"]), children: (p = (d = e.props).children) == null ? void 0 : p.call(d) }) })
      ]
    },
    e.key
  );
}, W = (e) => {
  const o = u.map(e, (t, i) => {
    const { header: n, children: c } = t.props;
    return /* @__PURE__ */ l(O, { textValue: n.children, children: c ? () => c : null }, i);
  }), r = o.map((t) => t.key).filter((t, i) => {
    var n, c;
    return t && !!((c = (n = e[i]) == null ? void 0 : n.props.header) != null && c.active);
  }) || [];
  return { children: o, defaultExpandedKeys: r };
}, H = ({ children: e }) => u.toArray(e).reduce((o, r) => I(r) && !r.props.header ? (console.warn("Use `AccordionItem` as children of `Accordion` and set the `header` prop accordingly."), o) : (I(r) && o.push(r), o), []), Y = ({ children: e }) => /* @__PURE__ */ l(E, { children: e });
Y.displayName = "FondueAccordionItem";
const q = (e) => {
  var r, t, i;
  const o = u.toArray(e);
  return ((i = (t = (r = o[o.length - 1]) == null ? void 0 : r.props) == null ? void 0 : t.header) == null ? void 0 : i.active) === !0;
}, z = (e) => {
  const { divider: o = !0, border: r = !0, "data-test-id": t = V } = e, i = H(e), n = W(i), c = C(null), s = L(n), f = C({ firstRender: !0, childLength: u.toArray(e.children).length }), m = u.toArray(e.children).length;
  _(() => {
    q(e.children) && !f.current.firstRender && u.toArray(e.children).length > f.current.childLength && s.toggleKey(n.defaultExpandedKeys[n.defaultExpandedKeys.length - 1]), f.current = { firstRender: !1, childLength: u.toArray(e.children).length };
  }, [n.defaultExpandedKeys, m, e.children, s]);
  const {
    // @react-aria prevents default action for onMouseDown as implemented here: https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/selection/src/useSelectableCollection.ts#L370
    // This makes it impossible to edit or select text in input fields inside the accordion
    // onKeydown automatically navigates away from child elements, including dropdown menus etc.
    // Focus should only be passed if the accordion item itself is focused
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    accordionProps: { onMouseDown: h, onKeyDown: y, ...A }
    // @react-aria enable by default typeahead which result in an event fired up on keypress and select the section
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
  } = P({ ...n, disallowTypeAhead: !0 }, s, c), g = { ...A, onKeyDown: (d) => {
    const p = d.target.dataset.key, a = s.selectionManager.focusedKey === p;
    p && a && y && y(d);
  } };
  return /* @__PURE__ */ l(
    "div",
    {
      ...g,
      ref: c,
      "data-test-id": t,
      className: w([
        o && "tw-divide-y tw-divide-black-10",
        r && "tw-border-t tw-border-b tw-border-black-10"
      ]),
      children: [...s.collection].map((d, p) => {
        const {
          header: a,
          padding: K,
          headerComponent: b,
          divider: D,
          "data-test-id": x = v
        } = i[p].props;
        return /* @__PURE__ */ l(
          j,
          {
            item: d,
            state: s,
            divider: D,
            header: a,
            padding: K,
            headerComponent: b,
            "data-test-id": x
          },
          d.key
        );
      })
    }
  );
};
z.displayName = "FondueAccordion";
export {
  z as Accordion,
  Y as AccordionItem
};
//# sourceMappingURL=Accordion.es.js.map
