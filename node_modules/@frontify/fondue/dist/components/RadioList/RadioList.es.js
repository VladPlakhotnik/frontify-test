import { jsx as e, jsxs as m } from "react/jsx-runtime";
import b from "../../foundation/Icon/Generated/IconQuestionMarkCircle.es.js";
import { generateRandomId as x } from "../../utilities/generateRandomId.es.js";
import { merge as n } from "../../utilities/merge.es.js";
import { useRef as v, useState as g, Children as h, isValidElement as k, useEffect as p } from "react";
import { RadioButtonEmphasis as z } from "./RadioButton.es.js";
import { LegacyTooltip as N, TooltipAlignment as T, TooltipPosition as R } from "../LegacyTooltip/LegacyTooltip.es.js";
import { IconSize as y } from "../../foundation/Icon/IconSize.es.js";
var C = /* @__PURE__ */ ((o) => (o.Horizontal = "Horizontal", o.Vertical = "Vertical", o))(C || {});
const L = ({
  children: o,
  defaultValue: l,
  direction: u = "Horizontal",
  onChange: s,
  name: f = "default-radio",
  ariaLabel: w
}) => {
  const a = v(null), [r, c] = g(l), d = h.map(o, (t) => k(t) ? t == null ? void 0 : t.props : null) ?? [];
  return p(() => {
    c(l);
  }, [l]), p(() => {
    if (a.current) {
      const t = a.current.querySelector(`input[value="${r}"]`);
      t && t.focus();
    }
  }, [r]), /* @__PURE__ */ e(
    "div",
    {
      "data-test-id": "radio-list-wrapper",
      role: "radiogroup",
      "aria-label": w ?? "Choose an option",
      ref: a,
      className: n(["tw-flex", u === "Horizontal" ? "tw-gap-4" : "tw-flex-col"]),
      children: d.map((t) => {
        const i = x();
        return /* @__PURE__ */ m("div", { className: "tw-flex tw-items-center tw-mb-2", children: [
          /* @__PURE__ */ e(
            "input",
            {
              "data-test-id": "radio-input",
              disabled: t.disabled,
              id: i,
              type: "radio",
              name: f,
              value: t.value,
              "aria-label": "radio",
              "aria-checked": t.value === r,
              defaultChecked: t.value === r,
              className: n([
                "tw-peer tw-form-radio w-w-4 tw-h-4 tw-border-black-60 disabled:tw-border-black-10 focus:tw-ring-0 focus:tw-ring-offset-0 focus-visible:tw-ring-2 focus-visible:tw-ring-offset-2",
                t.emphasis === z.Weak ? "tw-text-black-80" : "tw-text-box-selected-strong"
              ]),
              onChange: () => {
                c(t.value), s && s(t.value);
              }
            }
          ),
          !t.hideLabel && /* @__PURE__ */ m(
            "label",
            {
              "data-test-id": "radio-label",
              htmlFor: i,
              className: n([
                "tw-flex tw-flex-col tw-pl-2 tw-text-sm tw-font-normal peer-checked:tw-font-medium tw-text-black-80 peer-disabled:tw-text-black-40"
              ]),
              children: [
                t.value,
                t.helperText && /* @__PURE__ */ e("span", { className: "tw-text-black-80 tw-font-normal", children: t.helperText })
              ]
            }
          ),
          t.tooltip && /* @__PURE__ */ e(
            N,
            {
              alignment: T.Middle,
              content: t.tooltip,
              hoverDelay: 75,
              position: R.Top,
              triggerElement: /* @__PURE__ */ e("button", { className: "tw-flex tw-text-black-80 tw-mx-2 tw-self-center", children: /* @__PURE__ */ e(b, { size: y.Size16 }) }),
              withArrow: !0
            }
          )
        ] }, i);
      })
    }
  );
};
export {
  L as RadioList,
  C as RadioListDirection
};
//# sourceMappingURL=RadioList.es.js.map
