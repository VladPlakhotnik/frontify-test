import { jsxs as $, jsx as d } from "react/jsx-runtime";
import { forwardRef as j, cloneElement as I } from "react";
import { useButton as O } from "@react-aria/button";
import { merge as a } from "../../utilities/merge.es.js";
import { useForwardedRef as U } from "../../utilities/useForwardedRef.es.js";
import { ButtonStyle as o, ButtonEmphasis as u, ButtonType as V, ButtonSize as _, ButtonRounding as k } from "./ButtonTypes.es.js";
import { UpdatedButtonStyle as ut } from "./ButtonTypes.es.js";
import { ButtonCommonClasses as z, ButtonRoundingClasses as T, ButtonSizeClasses as B, IconSpacingClasses as W, ButtonStyleClasses as Y, ButtonDisabledClasses as q } from "./ButtonClasses.es.js";
import { FOCUS_VISIBLE_STYLE as v } from "../../utilities/focusStyle.es.js";
import { buttonTypeMap as A, buttonIconSizeMap as G } from "./mappings.es.js";
import { useFocusRing as H } from "@react-aria/focus";
const J = ({
  type: S = V.Button,
  style: t = o.Default,
  size: e = _.Medium,
  rounding: b = k.Medium,
  emphasis: n = u.Strong,
  hideLabel: m = !1,
  disabled: s = !1,
  icon: i,
  children: r,
  onClick: p,
  hugWidth: y = !0,
  "aria-label": C,
  "aria-describedby": g,
  formId: w,
  solid: x,
  inverted: D,
  "data-test-id": f = "button"
}, F) => {
  t === o.Primary ? (t = o.Default, n = u.Strong) : t === o.Secondary && (t = o.Default, n = u.Default), x === !1 && (n = u.Weak);
  const c = U(F), { buttonProps: N } = O(
    { onPress: () => p && p(), isDisabled: s, type: A[S] },
    c
  ), { isFocusVisible: R, focusProps: E } = H(), l = (P) => s ? q : `${Y[n][t][P]}`, M = a([
    l("button"),
    z,
    T[b],
    i && !r || m ? B[e].iconOnly : B[e].default,
    !y && "tw-w-full"
  ]);
  return /* @__PURE__ */ $(
    "button",
    {
      "data-test-id": f,
      "aria-label": C,
      "aria-disabled": s,
      "aria-describedby": g,
      ref: c,
      className: a([M, D && "tw-dark", R && v]),
      disabled: s,
      form: w,
      ...N,
      ...E,
      children: [
        i && /* @__PURE__ */ d(
          "span",
          {
            "data-test-id": `${f}-icon`,
            className: a([r && !m ? W[e] : "", l("icon")]),
            children: I(i, { size: G[e] })
          }
        ),
        r && /* @__PURE__ */ d(
          "span",
          {
            "data-test-id": `${f}-text`,
            className: a([l("text"), m && "tw-sr-only"]),
            children: r
          }
        )
      ]
    }
  );
}, K = j(J);
K.displayName = "FondueButton";
export {
  K as Button,
  z as ButtonCommonClasses,
  q as ButtonDisabledClasses,
  u as ButtonEmphasis,
  k as ButtonRounding,
  T as ButtonRoundingClasses,
  _ as ButtonSize,
  B as ButtonSizeClasses,
  o as ButtonStyle,
  Y as ButtonStyleClasses,
  V as ButtonType,
  W as IconSpacingClasses,
  ut as UpdatedButtonStyle
};
//# sourceMappingURL=Button.es.js.map
