import { jsx as r, jsxs as g } from "react/jsx-runtime";
import { TextInputType as k } from "../TextInput/TextInput.es.js";
import { useMemoizedId as y } from "../../hooks/useMemoizedId.es.js";
import { useFocusRing as v } from "@react-aria/focus";
import { FOCUS_STYLE as R } from "../../utilities/focusStyle.es.js";
import { merge as i } from "../../utilities/merge.es.js";
import { useRef as T } from "react";
var I = /* @__PURE__ */ ((e) => (e.Left = "Left", e.Right = "Right", e))(I || {});
const N = ({
  min: e,
  max: a,
  decorator: n,
  onChange: o,
  onEnterPressed: w,
  size: u,
  onBlur: c,
  value: m = "",
  decoratorPosition: s = "Left",
  type: p = k.Text
}) => {
  const { isFocusVisible: f, focusProps: d } = v({ within: !0, isTextInput: !0 }), l = T(null), h = (t) => {
    const { key: x, shiftKey: b } = t;
    x === "Enter" && !b && w && w(t);
  };
  return /* @__PURE__ */ r(
    "div",
    {
      ...d,
      className: i([
        "tw-flex tw-items-center tw-h-9 tw-px-2 tw-border tw-rounded tw-text-s tw-font-sans tw-relative tw-bg-white dark:tw-bg-transparent focus-within:tw-border-black-90 tw-border-black-20",
        f && R
      ]),
      "data-test-id": "color-input",
      children: /* @__PURE__ */ g(
        "div",
        {
          className: i([
            "tw-flex tw-gap-1",
            s === "Right" && "tw-flex-row-reverse"
          ]),
          children: [
            n && /* @__PURE__ */ r("div", { className: "tw-flex tw-items-center tw-justify-center tw-text-black-80", children: n }),
            /* @__PURE__ */ r(
              "input",
              {
                id: y(),
                ref: l,
                className: i([
                  "tw-grow tw-border-none tw-outline-none tw-bg-transparent tw-hide-input-arrows tw-text-black tw-placeholder-black-60 dark:tw-text-white",
                  s === "Right" && "tw-text-right"
                ]),
                onClick: () => {
                  var t;
                  return (t = l.current) == null ? void 0 : t.focus();
                },
                onKeyDown: h,
                onChange: (t) => o && o(t.currentTarget.value),
                onBlur: c,
                value: m,
                type: p,
                min: e,
                max: a,
                size: u
              }
            )
          ]
        }
      )
    }
  );
};
N.displayName = "FondueColorInput";
export {
  N as ColorInput,
  I as DecoratorPosition
};
//# sourceMappingURL=ColorInput.es.js.map
