import { jsxs as n, jsx as t } from "react/jsx-runtime";
import { SegmentedControls as L } from "../SegmentedControls/SegmentedControls.es.js";
import { TextInput as C } from "../TextInput/TextInput.es.js";
import { IconSize as k } from "../../foundation/Icon/IconSize.es.js";
import { isColorLight as v, toShortRgb as I } from "../../utilities/colors.es.js";
import { merge as x } from "../../utilities/merge.es.js";
import { useState as d, useEffect as S } from "react";
import { TinyColor as y } from "@ctrl/tinycolor";
import z from "../../foundation/Icon/Generated/IconMagnifier.es.js";
import T from "../../foundation/Icon/Generated/IconCheckMark.es.js";
import j from "../../foundation/Icon/Generated/IconGridRegular.es.js";
import G from "../../foundation/Icon/Generated/IconStackVertical.es.js";
const m = (r, l = "") => r == null ? void 0 : r.toLocaleLowerCase().includes(l.toLocaleLowerCase().trim()), R = ({ palettes: r = [], currentColor: l, onSelect: g }) => {
  const f = [
    { id: "Grid", icon: /* @__PURE__ */ t(j, {}), ariaLabel: "Grid" },
    { id: "List", icon: /* @__PURE__ */ t(G, {}), ariaLabel: "List" }
  ], [c, h] = d(f[0].id), [a, u] = d(""), [b, N] = d(r);
  S(() => {
    const i = setTimeout(() => {
      N(
        r.filter(({ title: o, colors: s }) => m(o, a) || s.some(({ name: e }) => m(e, a))).map(({ id: o, title: s, colors: e }) => ({
          id: o,
          title: s,
          colors: e.some(({ name: w }) => m(w, a)) ? e.filter(({ name: w }) => m(w, a)) : e
        }))
      );
    }, 200);
    return () => clearTimeout(i);
  }, [r, a]);
  const p = b.filter((i) => i.colors.length > 0);
  return /* @__PURE__ */ n("div", { className: "tw-flex tw-flex-col tw-gap-4", "data-test-id": "brand-color-picker", children: [
    /* @__PURE__ */ n("div", { className: "tw-flex tw-gap-2", children: [
      /* @__PURE__ */ t("div", { className: "tw-flex-1", children: /* @__PURE__ */ t(
        C,
        {
          value: a,
          decorator: /* @__PURE__ */ t(z, {}),
          placeholder: "Search",
          onChange: (i) => u(i),
          clearable: !0
        }
      ) }),
      /* @__PURE__ */ t("div", { className: "tw-w-[72px]", children: /* @__PURE__ */ t(
        L,
        {
          size: "small",
          items: f,
          activeItemId: c,
          onChange: (i) => h(i)
        }
      ) })
    ] }),
    /* @__PURE__ */ t("ul", { className: "tw-flex tw-flex-col tw-gap-4", children: p.length > 0 ? p.map(({ id: i, title: o, colors: s }) => /* @__PURE__ */ n("li", { className: "tw-flex tw-flex-col tw-gap-2", children: [
      /* @__PURE__ */ t("p", { className: "tw-text-black tw-text-xs tw-font-medium dark:tw-text-white", children: o }),
      /* @__PURE__ */ t(
        "ul",
        {
          className: x([
            "tw-flex tw-gap-y-2 tw-flex-wrap",
            c === "List" && "tw-flex-col"
          ]),
          children: s.map((e) => /* @__PURE__ */ t("li", { "data-test-id": "brand-color", children: /* @__PURE__ */ n(
            "button",
            {
              className: "tw-flex tw-w-full",
              onClick: () => g(e),
              type: "button",
              children: [
                /* @__PURE__ */ t(
                  "span",
                  {
                    className: x([
                      "tw-h-6 tw-w-6 tw-mr-2 tw-rounded tw-flex tw-items-center tw-justify-center tw-ring-1 tw-ring-black-10 tw-ring-offset-1",
                      v(e) ? "tw-text-black" : "tw-text-white"
                    ]),
                    style: { background: new y(I(e)).toRgbString() },
                    children: e.red === l.red && e.green === l.green && e.blue === l.blue && e.alpha === l.alpha && /* @__PURE__ */ t(T, { size: k.Size20 })
                  }
                ),
                c === "List" && /* @__PURE__ */ t("span", { className: "tw-h-6 tw-grow tw-flex tw-items-center tw-text-sm tw-text-left", children: e.name })
              ]
            }
          ) }, e.name))
        }
      )
    ] }, i)) : "No colors found" })
  ] });
};
R.displayName = "FondueBrandColorPicker";
export {
  R as BrandColorPicker
};
//# sourceMappingURL=BrandColorPicker.es.js.map
