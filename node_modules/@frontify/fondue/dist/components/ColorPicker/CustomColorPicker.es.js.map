{"version":3,"file":"CustomColorPicker.es.js","sources":["../../../src/components/ColorPicker/CustomColorPicker.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Dropdown } from '@components/Dropdown/Dropdown';\nimport { TextInputType } from '@components/TextInput/TextInput';\nimport { toLongRgb, toShortRgb } from '@utilities/colors';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { RgbaColorPicker } from 'react-colorful';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { Color, ColorFormat } from '../../types';\nimport { ColorInput, DecoratorPosition } from './ColorInput';\nimport { ColorPickerProps } from './ColorPicker';\n\nconst convertToHex = (color: Color) => new TinyColor(toShortRgb(color)).toHex();\n\nexport const CustomColorPicker = ({\n    currentColor,\n    currentFormat,\n    setFormat,\n    onSelect,\n}: Omit<ColorPickerProps, 'palette'>): ReactElement => {\n    const formatMenuBlock = [\n        {\n            id: 'color-picker-format-dropdown-block',\n            menuItems: Object.values(ColorFormat).map((id) => ({ id, title: id.toLocaleUpperCase() })),\n        },\n    ];\n    const { red, green, blue, alpha = 1 } = currentColor;\n    const [hexInput, setHexInput] = useState(convertToHex(currentColor));\n    const [alphaValue, setAlphaValue] = useState(alpha);\n\n    const handleHexChange = () => {\n        const parsedHex = new TinyColor(hexInput);\n        if (parsedHex.isValid) {\n            onSelect(toLongRgb(parsedHex.toRgb()));\n        }\n    };\n\n    useEffect(() => {\n        setAlphaValue(alpha);\n        setHexInput(convertToHex(currentColor));\n    }, [alpha, currentColor]);\n\n    return (\n        <div className=\"tw-flex tw-flex-col tw-gap-4\" data-test-id=\"custom-color-picker\" id=\"custom-color-picker\">\n            <div className=\"tw-flex tw-flex-col md:tw-flex-row tw-gap-2 tw-max-w-full\">\n                <div className=\"tw-min-w-[84px]\">\n                    <Dropdown\n                        menuBlocks={formatMenuBlock}\n                        activeItemId={currentFormat}\n                        onChange={(id) => id && setFormat && setFormat(id as ColorFormat)}\n                    />\n                </div>\n                {currentFormat === ColorFormat.Hex ? (\n                    <div className=\"tw-flex-1\">\n                        <ColorInput\n                            value={hexInput}\n                            decorator=\"#\"\n                            size={6}\n                            onChange={setHexInput}\n                            onEnterPressed={handleHexChange}\n                            onBlur={handleHexChange}\n                        />\n                    </div>\n                ) : (\n                    <>\n                        <div className=\"tw-flex-1\">\n                            <ColorInput\n                                min={0}\n                                max={255}\n                                size={3}\n                                type={TextInputType.Number}\n                                value={red.toString()}\n                                onChange={(value) => onSelect({ ...currentColor, red: parseInt(value) })}\n                            />\n                        </div>\n                        <div className=\"tw-flex-1\">\n                            <ColorInput\n                                min={0}\n                                max={255}\n                                size={3}\n                                type={TextInputType.Number}\n                                value={green.toString()}\n                                onChange={(value) => onSelect({ ...currentColor, green: parseInt(value) })}\n                            />\n                        </div>\n                        <div className=\"tw-flex-1\">\n                            <ColorInput\n                                min={0}\n                                max={255}\n                                size={3}\n                                type={TextInputType.Number}\n                                value={blue.toString()}\n                                onChange={(value) => onSelect({ ...currentColor, blue: parseInt(value) })}\n                            />\n                        </div>\n                    </>\n                )}\n                <ColorInput\n                    min={0}\n                    max={100}\n                    size={3}\n                    type={TextInputType.Number}\n                    value={Math.trunc(alphaValue * 100).toString()}\n                    decorator=\"%\"\n                    decoratorPosition={DecoratorPosition.Right}\n                    onChange={(value) => {\n                        const a = parseInt(value || '0', 10) / 100;\n                        setAlphaValue(a);\n                        onSelect({ ...currentColor, alpha: a });\n                    }}\n                />\n            </div>\n            <div className=\"tw-flex tw-gap-2 tw-w-full tw-h-[200px]\">\n                <div className=\"tw-relative tw-grow tw-rounded\">\n                    <RgbaColorPicker\n                        color={{ r: red, g: green, b: blue, a: alpha }}\n                        onChange={(color) =>\n                            onSelect({\n                                red: color.r,\n                                green: color.g,\n                                blue: color.b,\n                                alpha: color.a,\n                            })\n                        }\n                        style={{ width: '100%' }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nCustomColorPicker.displayName = 'FondueCustomColorPicker';\n"],"names":["convertToHex","color","TinyColor","toShortRgb","CustomColorPicker","currentColor","currentFormat","setFormat","onSelect","formatMenuBlock","ColorFormat","id","red","green","blue","alpha","hexInput","setHexInput","useState","alphaValue","setAlphaValue","handleHexChange","parsedHex","toLongRgb","useEffect","jsxs","jsx","Dropdown","ColorInput","Fragment","TextInputType","value","DecoratorPosition","a","RgbaColorPicker"],"mappings":";;;;;;;;;AAYA,MAAMA,IAAe,CAACC,MAAiB,IAAIC,EAAUC,EAAWF,CAAK,CAAC,EAAE,SAE3DG,IAAoB,CAAC;AAAA,EAC9B,cAAAC;AAAA,EACA,eAAAC;AAAA,EACA,WAAAC;AAAA,EACA,UAAAC;AACJ,MAAuD;AACnD,QAAMC,IAAkB;AAAA,IACpB;AAAA,MACI,IAAI;AAAA,MACJ,WAAW,OAAO,OAAOC,CAAW,EAAE,IAAI,CAACC,OAAQ,EAAE,IAAAA,GAAI,OAAOA,EAAG,kBAAA,EAAsB,EAAA;AAAA,IAC7F;AAAA,EAAA,GAEE,EAAE,KAAAC,GAAK,OAAAC,GAAO,MAAAC,GAAM,OAAAC,IAAQ,EAAM,IAAAV,GAClC,CAACW,GAAUC,CAAW,IAAIC,EAASlB,EAAaK,CAAY,CAAC,GAC7D,CAACc,GAAYC,CAAa,IAAIF,EAASH,CAAK,GAE5CM,IAAkB,MAAM;AACpB,UAAAC,IAAY,IAAIpB,EAAUc,CAAQ;AACxC,IAAIM,EAAU,WACVd,EAASe,EAAUD,EAAU,MAAM,CAAC,CAAC;AAAA,EACzC;AAGJ,SAAAE,EAAU,MAAM;AACZ,IAAAJ,EAAcL,CAAK,GACPE,EAAAjB,EAAaK,CAAY,CAAC;AAAA,EAAA,GACvC,CAACU,GAAOV,CAAY,CAAC,qBAGnB,OAAI,EAAA,WAAU,gCAA+B,gBAAa,uBAAsB,IAAG,uBAChF,UAAA;AAAA,IAAC,gBAAAoB,EAAA,OAAA,EAAI,WAAU,6DACX,UAAA;AAAA,MAAC,gBAAAC,EAAA,OAAA,EAAI,WAAU,mBACX,UAAA,gBAAAA;AAAA,QAACC;AAAA,QAAA;AAAA,UACG,YAAYlB;AAAA,UACZ,cAAcH;AAAA,UACd,UAAU,CAACK,MAAOA,KAAMJ,KAAaA,EAAUI,CAAiB;AAAA,QAAA;AAAA,MAAA,GAExE;AAAA,MACCL,MAAkBI,EAAY,MAC1B,gBAAAgB,EAAA,OAAA,EAAI,WAAU,aACX,UAAA,gBAAAA;AAAA,QAACE;AAAA,QAAA;AAAA,UACG,OAAOZ;AAAA,UACP,WAAU;AAAA,UACV,MAAM;AAAA,UACN,UAAUC;AAAA,UACV,gBAAgBI;AAAA,UAChB,QAAQA;AAAA,QAAA;AAAA,MACZ,EAAA,CACJ,IAGI,gBAAAI,EAAAI,GAAA,EAAA,UAAA;AAAA,QAAC,gBAAAH,EAAA,OAAA,EAAI,WAAU,aACX,UAAA,gBAAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,KAAK;AAAA,YACL,KAAK;AAAA,YACL,MAAM;AAAA,YACN,MAAME,EAAc;AAAA,YACpB,OAAOlB,EAAI,SAAS;AAAA,YACpB,UAAU,CAACmB,MAAUvB,EAAS,EAAE,GAAGH,GAAc,KAAK,SAAS0B,CAAK,GAAG;AAAA,UAAA;AAAA,QAAA,GAE/E;AAAA,QACA,gBAAAL,EAAC,OAAI,EAAA,WAAU,aACX,UAAA,gBAAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,KAAK;AAAA,YACL,KAAK;AAAA,YACL,MAAM;AAAA,YACN,MAAME,EAAc;AAAA,YACpB,OAAOjB,EAAM,SAAS;AAAA,YACtB,UAAU,CAACkB,MAAUvB,EAAS,EAAE,GAAGH,GAAc,OAAO,SAAS0B,CAAK,GAAG;AAAA,UAAA;AAAA,QAAA,GAEjF;AAAA,QACA,gBAAAL,EAAC,OAAI,EAAA,WAAU,aACX,UAAA,gBAAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,KAAK;AAAA,YACL,KAAK;AAAA,YACL,MAAM;AAAA,YACN,MAAME,EAAc;AAAA,YACpB,OAAOhB,EAAK,SAAS;AAAA,YACrB,UAAU,CAACiB,MAAUvB,EAAS,EAAE,GAAGH,GAAc,MAAM,SAAS0B,CAAK,GAAG;AAAA,UAAA;AAAA,QAAA,GAEhF;AAAA,MAAA,GACJ;AAAA,MAEJ,gBAAAL;AAAA,QAACE;AAAA,QAAA;AAAA,UACG,KAAK;AAAA,UACL,KAAK;AAAA,UACL,MAAM;AAAA,UACN,MAAME,EAAc;AAAA,UACpB,OAAO,KAAK,MAAMX,IAAa,GAAG,EAAE,SAAS;AAAA,UAC7C,WAAU;AAAA,UACV,mBAAmBa,EAAkB;AAAA,UACrC,UAAU,CAACD,MAAU;AACjB,kBAAME,IAAI,SAASF,KAAS,KAAK,EAAE,IAAI;AACvC,YAAAX,EAAca,CAAC,GACfzB,EAAS,EAAE,GAAGH,GAAc,OAAO4B,EAAG,CAAA;AAAA,UAC1C;AAAA,QAAA;AAAA,MACJ;AAAA,IAAA,GACJ;AAAA,sBACC,OAAI,EAAA,WAAU,2CACX,UAAC,gBAAAP,EAAA,OAAA,EAAI,WAAU,kCACX,UAAA,gBAAAA;AAAA,MAACQ;AAAA,MAAA;AAAA,QACG,OAAO,EAAE,GAAGtB,GAAK,GAAGC,GAAO,GAAGC,GAAM,GAAGC,EAAM;AAAA,QAC7C,UAAU,CAACd,MACPO,EAAS;AAAA,UACL,KAAKP,EAAM;AAAA,UACX,OAAOA,EAAM;AAAA,UACb,MAAMA,EAAM;AAAA,UACZ,OAAOA,EAAM;AAAA,QAAA,CAChB;AAAA,QAEL,OAAO,EAAE,OAAO,OAAO;AAAA,MAAA;AAAA,OAE/B,EACJ,CAAA;AAAA,EACJ,EAAA,CAAA;AAER;AACAG,EAAkB,cAAc;"}