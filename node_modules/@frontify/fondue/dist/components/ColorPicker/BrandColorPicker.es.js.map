{"version":3,"file":"BrandColorPicker.es.js","sources":["../../../src/components/ColorPicker/BrandColorPicker.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { SegmentedControls } from '@components/SegmentedControls/SegmentedControls';\nimport { TextInput } from '@components/TextInput/TextInput';\nimport { IconCheckMark, IconGridRegular, IconMagnifier, IconStackVertical } from '@foundation/Icon/Generated';\nimport { IconSize } from '@foundation/Icon/IconSize';\nimport { isColorLight, toShortRgb } from '@utilities/colors';\nimport { merge } from '@utilities/merge';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { ColorPickerProps } from './ColorPicker';\n\nconst find = (haystack?: string, needle = '') =>\n    haystack?.toLocaleLowerCase().includes(needle.toLocaleLowerCase().trim());\n\nenum BrandColorView {\n    List = 'List',\n    Grid = 'Grid',\n}\n\ntype Props = Omit<ColorPickerProps, 'currentFormat' | 'setFormat'>;\n\nexport const BrandColorPicker = ({ palettes: defaultPalettes = [], currentColor, onSelect }: Props): ReactElement => {\n    const views = [\n        { id: BrandColorView.Grid, icon: <IconGridRegular />, ariaLabel: 'Grid' },\n        { id: BrandColorView.List, icon: <IconStackVertical />, ariaLabel: 'List' },\n    ];\n    const [view, setView] = useState(views[0].id);\n    const [query, setQuery] = useState('');\n    const [palettes, setPalettes] = useState(defaultPalettes);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setPalettes(\n                defaultPalettes\n                    .filter(({ title, colors }) => find(title, query) || colors.some(({ name }) => find(name, query)))\n                    .map(({ id, title, colors }) => ({\n                        id,\n                        title,\n                        colors: colors.some(({ name }) => find(name, query))\n                            ? colors.filter(({ name }) => find(name, query))\n                            : colors,\n                    })),\n            );\n        }, 200);\n\n        return () => clearTimeout(timer);\n    }, [defaultPalettes, query]);\n\n    const palettesWithColors = palettes.filter((palette) => palette.colors.length > 0);\n\n    return (\n        <div className=\"tw-flex tw-flex-col tw-gap-4\" data-test-id=\"brand-color-picker\">\n            <div className=\"tw-flex tw-gap-2\">\n                <div className=\"tw-flex-1\">\n                    <TextInput\n                        value={query}\n                        decorator={<IconMagnifier />}\n                        placeholder=\"Search\"\n                        onChange={(value) => setQuery(value)}\n                        clearable\n                    />\n                </div>\n                <div className=\"tw-w-[72px]\">\n                    <SegmentedControls\n                        size=\"small\"\n                        items={views}\n                        activeItemId={view}\n                        onChange={(colorView) => setView(colorView as BrandColorView)}\n                    />\n                </div>\n            </div>\n            <ul className=\"tw-flex tw-flex-col tw-gap-4\">\n                {palettesWithColors.length > 0\n                    ? palettesWithColors.map(({ id, title, colors }) => (\n                          <li key={id} className=\"tw-flex tw-flex-col tw-gap-2\">\n                              <p className=\"tw-text-black tw-text-xs tw-font-medium dark:tw-text-white\">{title}</p>\n                              <ul\n                                  className={merge([\n                                      'tw-flex tw-gap-y-2 tw-flex-wrap',\n                                      view === BrandColorView.List && 'tw-flex-col',\n                                  ])}\n                              >\n                                  {colors.map((color) => (\n                                      <li key={color.name} data-test-id=\"brand-color\">\n                                          <button\n                                              className=\"tw-flex tw-w-full\"\n                                              onClick={() => onSelect(color)}\n                                              type=\"button\"\n                                          >\n                                              <span\n                                                  className={merge([\n                                                      'tw-h-6 tw-w-6 tw-mr-2 tw-rounded tw-flex tw-items-center tw-justify-center tw-ring-1 tw-ring-black-10 tw-ring-offset-1',\n                                                      isColorLight(color) ? 'tw-text-black' : 'tw-text-white',\n                                                  ])}\n                                                  style={{ background: new TinyColor(toShortRgb(color)).toRgbString() }}\n                                              >\n                                                  {color.red === currentColor.red &&\n                                                      color.green === currentColor.green &&\n                                                      color.blue === currentColor.blue &&\n                                                      color.alpha === currentColor.alpha && (\n                                                          <IconCheckMark size={IconSize.Size20} />\n                                                      )}\n                                              </span>\n                                              {view === BrandColorView.List && (\n                                                  <span className=\"tw-h-6 tw-grow tw-flex tw-items-center tw-text-sm tw-text-left\">\n                                                      {color.name}\n                                                  </span>\n                                              )}\n                                          </button>\n                                      </li>\n                                  ))}\n                              </ul>\n                          </li>\n                      ))\n                    : 'No colors found'}\n            </ul>\n        </div>\n    );\n};\nBrandColorPicker.displayName = 'FondueBrandColorPicker';\n"],"names":["find","haystack","needle","BrandColorPicker","defaultPalettes","currentColor","onSelect","views","IconGridRegular","IconStackVertical","view","setView","useState","query","setQuery","palettes","setPalettes","useEffect","timer","title","colors","name","id","palettesWithColors","palette","jsxs","jsx","TextInput","IconMagnifier","value","SegmentedControls","colorView","merge","color","isColorLight","TinyColor","toShortRgb","IconCheckMark","IconSize"],"mappings":"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"}