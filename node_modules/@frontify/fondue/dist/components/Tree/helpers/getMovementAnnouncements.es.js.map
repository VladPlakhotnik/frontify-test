{"version":3,"file":"getMovementAnnouncements.es.js","sources":["../../../../src/components/Tree/helpers/getMovementAnnouncements.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Dispatch, SetStateAction, isValidElement } from 'react';\nimport { arrayMove } from '@dnd-kit/sortable';\n\nimport { TreeActive, TreeAnnouncements, TreeOver, TreeState } from '../types';\n\ntype AnnouncementItem = {\n    level: number;\n    id: string;\n    parentId?: string;\n};\n\ntype AnnouncementArgs = {\n    eventName: string;\n    activeId: string;\n    activeTitle: string;\n    overId?: string;\n    overTitle?: string;\n    treeState: TreeState;\n    currentPosition: Nullable<{ overId: string; parentId: Nullable<string> }>;\n    setCurrentPosition: Dispatch<\n        SetStateAction<\n            Nullable<{\n                overId: string;\n                parentId: Nullable<string>;\n            }>\n        >\n    >;\n};\n\nexport const getAnnouncements = (\n    treeState: TreeState,\n    currentPosition: AnnouncementArgs['currentPosition'],\n    setCurrentPosition: AnnouncementArgs['setCurrentPosition'],\n): TreeAnnouncements => {\n    const getActiveTitle = (active: TreeActive) => {\n        let title: string = active.id;\n\n        const activeNode = treeState.nodes.find((node) => node.props.id === active.id);\n\n        if (activeNode && isValidElement(activeNode.props.contentComponent)) {\n            title = activeNode.props.contentComponent.props.title;\n        } else if (activeNode?.props?.label) {\n            title = activeNode.props.label;\n        }\n\n        return title;\n    };\n\n    const getOverTitle = (over: TreeOver | null) => {\n        let title = over?.id;\n\n        const overNode = treeState.nodes.find((node) => node.props.id === over?.id);\n\n        if (overNode && isValidElement(overNode.props.contentComponent)) {\n            title = overNode.props.contentComponent.props.title;\n        } else if (overNode?.props?.label) {\n            title = overNode.props.label;\n        }\n\n        return title;\n    };\n\n    return {\n        onDragStart({ active }) {\n            return `Picked up ${getActiveTitle(active) || active.id}.`;\n        },\n        onDragMove({ active, over }) {\n            return getMovementAnnouncement({\n                eventName: 'onDragMove',\n                activeId: active.id,\n                activeTitle: getActiveTitle(active),\n                overId: over?.id,\n                overTitle: getOverTitle(over),\n                treeState,\n                setCurrentPosition,\n                currentPosition,\n            });\n        },\n        onDragOver({ active, over }) {\n            return getMovementAnnouncement({\n                eventName: 'onDragOver',\n                activeId: active.id,\n                activeTitle: getActiveTitle(active),\n                overId: over?.id,\n                overTitle: getOverTitle(over),\n                treeState,\n                setCurrentPosition,\n                currentPosition,\n            });\n        },\n        onDragEnd({ active, over }) {\n            return getMovementAnnouncement({\n                eventName: 'onDragEnd',\n                activeId: active.id,\n                activeTitle: getActiveTitle(active),\n                overId: over?.id,\n                overTitle: getOverTitle(over),\n                treeState,\n                setCurrentPosition,\n                currentPosition,\n            });\n        },\n        onDragCancel({ active }) {\n            const title = getActiveTitle(active);\n\n            return `Moving was cancelled. ${title} was dropped in its original position.`;\n        },\n    };\n};\n\nconst getMovementAnnouncement = ({\n    eventName,\n    activeId,\n    activeTitle,\n    overId,\n    overTitle,\n    treeState,\n    currentPosition,\n    setCurrentPosition,\n}: AnnouncementArgs) => {\n    const projected = treeState.projection;\n\n    if (overId && projected) {\n        if (eventName !== 'onDragEnd') {\n            if (\n                currentPosition &&\n                projected.parentId === currentPosition.parentId &&\n                overId === currentPosition.overId\n            ) {\n                return;\n            } else {\n                setCurrentPosition({\n                    parentId: projected.parentId,\n                    overId,\n                });\n            }\n        }\n\n        const announcementNodes: AnnouncementItem[] = treeState.nodes.map(({ props }) => ({\n            id: props.id,\n            level: props.level ?? 0,\n            parentId: props.parentId,\n        }));\n\n        const overIndex = announcementNodes.findIndex(({ id }) => id === overId);\n        const activeIndex = announcementNodes.findIndex(({ id }) => id === activeId);\n        const sortedItems = arrayMove(announcementNodes, activeIndex, overIndex);\n\n        const previousItem = sortedItems[overIndex - 1];\n\n        let announcement;\n        const movedVerb = eventName === 'onDragEnd' ? 'dropped' : 'moved';\n        const nestedVerb = eventName === 'onDragEnd' ? 'dropped' : 'nested';\n\n        if (!previousItem) {\n            const nextItem = sortedItems[overIndex + 1];\n            announcement = `${activeTitle} was ${movedVerb} before ${overTitle || nextItem.id}.`;\n        } else {\n            if (projected.depth > previousItem.level) {\n                announcement = `${activeTitle} was ${nestedVerb} under ${overTitle || previousItem.id}.`;\n            } else {\n                let previousSibling: AnnouncementItem | undefined = previousItem;\n                while (previousSibling && projected.depth < previousSibling.level) {\n                    const parentId: string | undefined = previousSibling.parentId;\n                    previousSibling = sortedItems.find(({ id }) => id === parentId);\n                }\n\n                if (previousSibling) {\n                    announcement = `${activeTitle} was ${movedVerb} after ${overTitle || previousSibling.id}.`;\n                }\n            }\n        }\n\n        return announcement;\n    }\n\n    return;\n};\n"],"names":["getAnnouncements","treeState","currentPosition","setCurrentPosition","getActiveTitle","active","title","activeNode","node","isValidElement","_a","getOverTitle","over","overNode","getMovementAnnouncement","eventName","activeId","activeTitle","overId","overTitle","projected","announcementNodes","props","overIndex","id","activeIndex","sortedItems","arrayMove","previousItem","announcement","movedVerb","nestedVerb","previousSibling","parentId","nextItem"],"mappings":"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"}