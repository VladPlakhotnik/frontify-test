{"version":3,"file":"types.es.js","sources":["../../../src/components/Tree/types.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport type { MutableRefObject, ReactElement, ReactNode } from 'react';\nimport { Active, Collision, Over, Translate } from '@dnd-kit/core';\nimport { useSortable } from '@dnd-kit/sortable';\n\nimport { InternalTreeItemProps, type Overlay } from './TreeItem';\nimport { type Projection } from './helpers';\n\nexport type SensorContext = MutableRefObject<{\n    nodes: ReactElement[];\n    offset: number;\n}>;\n\nexport type OnSelectCallback = (id: string) => void;\nexport type OnExpandCallback = (id: string) => void;\n\nexport type OnShrinkCallback = (id: string) => void;\nexport type OnTreeDropCallback = (args: {\n    id: string;\n    parentId: Nullable<string>;\n    sort: number;\n    contentComponent: Nullable<ReactNode>;\n    parentType?: string;\n}) => void;\n\nexport type DragHandlerPosition = 'left' | 'right' | 'none';\nexport type TreeItemPropsSizing = 'none' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large';\ntype TreeItemContentFit = 'content-fit' | 'single-line';\ntype TreeItemBorderStyle = 'solid' | 'dashed' | 'dotted' | 'none';\nexport type TreeItemColors = 'neutral' | 'soft' | 'none';\ntype TreeItemColorStyles = {\n    textColor: string;\n    selectedTextColor: string;\n    backgroundColor: string;\n    selectedBackgroundColor: string;\n    pressedBackgroundColor: string;\n    dragHanlderTextColor: string;\n    selectedDragHanlderTextColor: string;\n};\n\nexport const TreeItemSpacingClassMap: Record<TreeItemPropsSizing, string> = {\n    none: 'tw-my-0',\n    'x-small': 'tw-my-0.5',\n    small: 'tw-my-1',\n    medium: 'tw-my-1.5',\n    large: 'tw-my-2',\n    'x-large': 'tw-my-2.5',\n};\n\nexport const TreeItemShadowClassMap: Record<TreeItemPropsSizing, string> = {\n    none: 'tw-shadow-none',\n    'x-small': 'tw-shadow-sm',\n    small: 'tw-shadow',\n    medium: 'tw-shadow-md',\n    large: 'tw-shadow-lg',\n    'x-large': 'tw-shadow-xl',\n};\n\nexport const TreeItemBorderRadiusClassMap: Record<TreeItemPropsSizing, string> = {\n    none: 'tw-rounded-none',\n    'x-small': 'tw-rounded-sm',\n    small: 'tw-rounded',\n    medium: 'tw-rounded-md',\n    large: 'tw-rounded-lg',\n    'x-large': 'tw-rounded-xl',\n};\n\nexport const TreeItemBorderClassMap: Record<Exclude<TreeItemPropsSizing, 'x-large'>, string> = {\n    none: 'tw-border-0',\n    'x-small': 'tw-border',\n    small: 'tw-border-2',\n    medium: 'tw-border-4',\n    large: 'tw-border-8',\n};\n\nexport const TreeItemBorderStyleClassMap: Record<TreeItemBorderStyle, string> = {\n    none: 'tw-border-none',\n    solid: 'tw-border-solid',\n    dotted: 'tw-border-dotted',\n    dashed: 'tw-border-dashed',\n};\n\nexport const TreeItemColorsClassMap: Record<TreeItemColors, TreeItemColorStyles> = {\n    none: {\n        textColor: '',\n        selectedTextColor: '',\n        backgroundColor: '',\n        selectedBackgroundColor: '',\n        pressedBackgroundColor: '',\n        dragHanlderTextColor: '',\n        selectedDragHanlderTextColor: '',\n    },\n    neutral: {\n        textColor: 'tw-text-text',\n        selectedTextColor: 'tw-font-medium tw-text-box-neutral-strong-inverse',\n        backgroundColor: 'group-hover:tw-bg-box-neutral',\n        selectedBackgroundColor: 'tw-bg-box-neutral-strong group-hover:tw-bg-box-neutral-strong-hover',\n        pressedBackgroundColor: 'group-active:tw-bg-box-neutral-pressed',\n        dragHanlderTextColor: 'tw-text-text',\n        selectedDragHanlderTextColor: 'tw-text-box-neutral-strong-inverse',\n    },\n    soft: {\n        textColor: 'tw-text-text',\n        selectedTextColor: 'tw-font-medium tw-text-box-neutral-strong',\n        backgroundColor: 'group-hover:tw-bg-box-neutral-hover',\n        selectedBackgroundColor:\n            'tw-bg-box-neutral-strong-inverse-hover group-hover:tw-bg-box-neutral-strong-inverse-hover',\n        pressedBackgroundColor: 'group-active:tw-bg-box-neutral-pressed',\n        dragHanlderTextColor: 'tw-text-text',\n        selectedDragHanlderTextColor: 'tw-text-box-neutral-strong',\n    },\n};\n\nexport type TreeItemStyling = {\n    spacingY?: TreeItemPropsSizing;\n    contentHight?: TreeItemContentFit;\n    shadow?: TreeItemPropsSizing;\n    borderRadius?: TreeItemPropsSizing;\n    borderWidth?: Exclude<TreeItemPropsSizing, 'x-large'>;\n    borderStyle?: TreeItemBorderStyle;\n    activeColorStyle?: TreeItemColors;\n};\n\nexport type TreeProps = {\n    id: string;\n    draggable?: boolean;\n    children: ReactNode;\n    multiselect?: boolean;\n    selectedIds?: string[];\n    expandedIds?: string[];\n    dragHandlerPosition?: DragHandlerPosition;\n    showDragHandlerOnHoverOnly?: boolean;\n    showContentWhileDragging?: boolean;\n    itemStyle?: TreeItemStyling;\n    'data-test-id'?: string;\n    onSelect?: OnSelectCallback;\n    onExpand?: OnExpandCallback;\n    onShrink?: OnShrinkCallback;\n    onDrop?: OnTreeDropCallback;\n};\n\ntype TreeItemBaseProps = {\n    id: string;\n    'data-test-id'?: string;\n    onDrop?: OnTreeDropCallback;\n    /**\n     * The type of item being dragged.\n     */\n    type?: string;\n    /**\n     * The kinds of dragItems this dropTarget accepts\n     *  @example 'itemA, itemA-within, itemA-deeper'\n     * if suffix '-within' is appended, then it will allow dropping item inside it\n     * if suffix '-deeper' is appended, then it will allow expand because it will allow dropping in levels deeper\n     */\n    accepts?: string;\n    children?: ReactNode;\n    draggable?: boolean;\n    /** Removes the expand caret, recovering the space ignoring if there are children */\n    expandable?: boolean;\n    showDragHandlerOnHoverOnly?: boolean;\n    /**\n     * dragHandlerPosition = 'none' makes the whole item draggble rather than only the dragHandler\n     */\n    dragHandlerPosition?: DragHandlerPosition;\n    showContentWhileDragging?: boolean;\n    itemStyle?: TreeItemStyling;\n    showCaret?: boolean;\n    ignoreItemDoubleClick?: boolean;\n    expandOnSelect?: boolean;\n    levelConstraint?: Nullable<number>;\n};\n\nexport type TreeItemWithLabelProps = {\n    label?: string;\n    contentComponent?: never;\n} & TreeItemBaseProps;\n\nexport type TreeItemWithContentComponentProps = {\n    label?: never;\n    contentComponent?: ReactNode;\n} & TreeItemBaseProps;\n\nexport type SortableProps = Partial<ReturnType<typeof useSortable>>;\n\nexport type TreeItemProps = SortableProps & (TreeItemWithLabelProps | TreeItemWithContentComponentProps);\n\nexport type SortableTreeItemProps = TreeItemProps;\n\nexport type TreeItemState = {\n    parentId?: string;\n    childrenIds?: string[];\n    level: number;\n    domElement?: HTMLElement;\n};\n\nexport type TreeState = {\n    selectedIds: Set<string>;\n    expandedIds: Set<string>;\n    selectionMode: 'single' | 'multiselect';\n    overlay?: Overlay;\n    nodes: ReactElement<InternalTreeItemProps>[];\n    rootNodes: ReactElement<InternalTreeItemProps>[];\n    projection: Nullable<Projection>;\n};\n\nexport type TreeStateAction =\n    | { type: 'REPLACE_STATE'; payload: TreeState }\n    | { type: 'REGISTER_OVERLAY_ITEM'; payload: Overlay }\n    | { type: 'SET_SELECT'; payload: string }\n    | { type: 'EXPAND_NODE'; payload: string }\n    | { type: 'SHRINK_NODE'; payload: string }\n    | { type: 'SET_HIDDEN'; payload: { ids: string[]; isHidden: boolean } }\n    | { type: 'SET_SELECTION_MODE'; payload: { selectionMode: TreeState['selectionMode'] } }\n    | { type: 'SET_PROJECTION'; payload: Nullable<Projection> }\n    | { type: 'REGISTER_NODE_CHILDREN'; payload: { id: string; children: ReactElement<InternalTreeItemProps>[] } }\n    | { type: 'UNREGISTER_NODE_CHILDREN'; payload: string }\n    | { type: 'REPLACE_EXPANDED'; payload: string[] }\n    | { type: 'REPLACE_SELECTED'; payload: string[] }\n    | { type: 'REGISTER_ROOT_NODES'; payload: ReactElement<InternalTreeItemProps>[] }\n    | { type: 'REGISTER_NODES'; payload: ReactElement<InternalTreeItemProps>[] };\n\nexport type RegisterNodeChildrenPayload = Extract<TreeStateAction, { type: 'REGISTER_NODE_CHILDREN' }>['payload'];\n\nexport type CollisionPosition = Nullable<'before' | 'within' | 'after'>;\n\n// dnd-kit type overrides\nexport type TreeActive = Omit<Active, 'id'> & {\n    id: string;\n};\n\nexport type TreeOver = Omit<Over, 'id'> & {\n    id: string;\n};\n\ntype TreeCollision = Omit<Collision, 'id'> & {\n    id: string;\n};\n\ntype TreeDragEvent = {\n    activatorEvent: Event;\n    active: TreeActive;\n    collisions: TreeCollision[] | null;\n    delta: Translate;\n    over: TreeOver | null;\n};\n\nexport type TreeDragStartEvent = Pick<TreeDragEvent, 'active'>;\nexport type TreeDragMoveEvent = TreeDragEvent;\nexport type TreeDragOverEvent = TreeDragMoveEvent;\nexport type TreeDragEndEvent = TreeDragEvent;\nexport type TreeDragCancelEvent = TreeDragEndEvent;\n\nexport type TreeAnnouncements = {\n    onDragStart({ active }: Pick<TreeDragEvent, 'active'>): string | undefined;\n    onDragMove?({ active, over }: TreeDragEvent): string | undefined;\n    onDragOver({ active, over }: TreeDragEvent): string | undefined;\n    onDragEnd({ active, over }: TreeDragEvent): string | undefined;\n    onDragCancel({ active, over }: TreeDragEvent): string | undefined;\n};\n"],"names":["TreeItemSpacingClassMap","TreeItemShadowClassMap","TreeItemBorderRadiusClassMap","TreeItemBorderClassMap","TreeItemBorderStyleClassMap","TreeItemColorsClassMap"],"mappings":"AAyCO,MAAMA,IAA+D;AAAA,EACxE,MAAM;AAAA,EACN,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,WAAW;AACf,GAEaC,IAA8D;AAAA,EACvE,MAAM;AAAA,EACN,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,WAAW;AACf,GAEaC,IAAoE;AAAA,EAC7E,MAAM;AAAA,EACN,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,WAAW;AACf,GAEaC,IAAkF;AAAA,EAC3F,MAAM;AAAA,EACN,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AACX,GAEaC,IAAmE;AAAA,EAC5E,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AACZ,GAEaC,IAAsE;AAAA,EAC/E,MAAM;AAAA,IACF,WAAW;AAAA,IACX,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,yBAAyB;AAAA,IACzB,wBAAwB;AAAA,IACxB,sBAAsB;AAAA,IACtB,8BAA8B;AAAA,EAClC;AAAA,EACA,SAAS;AAAA,IACL,WAAW;AAAA,IACX,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,yBAAyB;AAAA,IACzB,wBAAwB;AAAA,IACxB,sBAAsB;AAAA,IACtB,8BAA8B;AAAA,EAClC;AAAA,EACA,MAAM;AAAA,IACF,WAAW;AAAA,IACX,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,yBACI;AAAA,IACJ,wBAAwB;AAAA,IACxB,sBAAsB;AAAA,IACtB,8BAA8B;AAAA,EAClC;AACJ;"}