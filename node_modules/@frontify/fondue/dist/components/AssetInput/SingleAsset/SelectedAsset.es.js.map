{"version":3,"file":"SelectedAsset.es.js","sources":["../../../../src/components/AssetInput/SingleAsset/SelectedAsset.tsx"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { ActionMenu } from '@components/ActionMenu/ActionMenu/ActionMenu';\nimport { IconCaretDown } from '@foundation/Icon/Generated';\nimport { IconSize } from '@foundation/Icon/IconSize';\nimport { useMemoizedId } from '@hooks/useMemoizedId';\nimport { useButton } from '@react-aria/button';\nimport { FocusScope, useFocusRing } from '@react-aria/focus';\nimport { useMenuTrigger } from '@react-aria/menu';\nimport { DismissButton, useOverlay } from '@react-aria/overlays';\nimport { mergeProps } from '@react-aria/utils';\nimport { useMenuTriggerState } from '@react-stately/menu';\nimport { FOCUS_STYLE } from '@utilities/focusStyle';\nimport { merge } from '@utilities/merge';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { ReactElement, useEffect, useRef, useState } from 'react';\nimport { AssetInputProps, AssetInputSize, AssetType } from '../AssetInput';\nimport { AssetThumbnail } from '../AssetThumbnail';\nimport { AssetSubline } from './AssetSubline';\nimport { SpinningCircle } from './SpinningCircle';\n\nexport type SelectedAssetProps = Pick<\n    AssetInputProps,\n    'actions' | 'isLoading' | 'size' | 'hideSize' | 'hideExtension'\n> & {\n    asset: AssetType;\n};\n\nexport const SelectedAsset = ({\n    asset,\n    size,\n    actions,\n    isLoading,\n    hideSize = false,\n    hideExtension = false,\n}: Required<Omit<SelectedAssetProps, 'hideSize' | 'hideExtension'>> &\n    Pick<SelectedAssetProps, 'hideSize' | 'hideExtension'>): ReactElement => {\n    const menuId = useMemoizedId();\n    const labelId = useMemoizedId();\n    const buttonRef = useRef<HTMLButtonElement | null>(null);\n    const menuState = useMenuTriggerState({ closeOnSelect: true });\n    const { isOpen, focusStrategy } = menuState;\n    const { menuTriggerProps } = useMenuTrigger({}, menuState, buttonRef);\n    const { buttonProps } = useButton(menuTriggerProps, buttonRef);\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const overlayRef = useRef<HTMLDivElement | null>(null);\n    const { overlayProps } = useOverlay(\n        { onClose: () => menuState.close(), shouldCloseOnBlur: true, isOpen, isDismissable: true },\n        overlayRef,\n    );\n    const title = asset?.name || 'Your Asset';\n\n    const [flyoutWidth, setFlyoutWidth] = useState(0);\n\n    useEffect(() => {\n        let timer: number | null = null;\n        const calculateFlyoutWidth = () => {\n            const calculatedWidth = buttonRef.current?.getBoundingClientRect().width ?? 0;\n            timer = window.setTimeout(() => setFlyoutWidth(calculatedWidth), 0);\n        };\n        const resizeObserver = new ResizeObserver(calculateFlyoutWidth);\n        if (buttonRef.current) {\n            resizeObserver.observe(buttonRef.current);\n        }\n\n        return () => {\n            timer && clearTimeout(timer);\n            resizeObserver.disconnect();\n        };\n    }, []);\n\n    return (\n        <div\n            className=\"tw-font-sans tw-w-full tw-text-s tw-bg-transparent tw-font-normal tw-min-w-0\"\n            aria-labelledby={labelId}\n            title={title}\n            data-test-id=\"asset-single-input\"\n        >\n            <button\n                {...mergeProps(buttonProps, focusProps)}\n                ref={buttonRef}\n                className={merge([\n                    'tw-w-full tw-flex tw-border tw-rounded tw-overflow-hidden hover:tw-border-black-90 dark:hover:tw-border-black-40 focus-visible:tw-outline-none',\n                    isFocusVisible && FOCUS_STYLE,\n                    size === AssetInputSize.Large ? 'tw-h-[11.5rem] tw-flex-col' : 'tw-h-14',\n                    isOpen || isFocusVisible\n                        ? 'tw-border-black-90 dark:tw-border-black-10'\n                        : 'tw-border-black-20 dark:tw-border-black-80',\n                ])}\n            >\n                {isLoading && !asset && (\n                    <div\n                        className={merge([\n                            'tw-flex tw-justify-center tw-items-center',\n                            size === AssetInputSize.Large ? 'tw-w-full tw-h-32' : 'tw-w-14 tw-h-full',\n                        ])}\n                    >\n                        <SpinningCircle size={size} />\n                    </div>\n                )}\n                {asset && <AssetThumbnail asset={asset} size={size} isActive={isOpen || isFocusVisible} />}\n                <div\n                    className={merge([\n                        'tw-min-w-0 tw-max-w-full tw-flex tw-flex-auto tw-self-stretch tw-border-black-100 tw-border-opacity-25',\n                        size === AssetInputSize.Large ? 'tw-h-14 tw-border-t' : 'tw-h-full tw-border-l',\n                    ])}\n                >\n                    <div className=\"tw-min-w-0 tw-pr-3 tw-pl-4 tw-flex tw-flex-auto tw-flex-col tw-items-start tw-justify-center tw-h-full\">\n                        <span\n                            id={labelId}\n                            className={merge([\n                                'tw-max-w-full tw-text-black-100 tw-text-s tw-truncate dark:tw-text-white',\n                                (isOpen || isFocusVisible) && 'tw-font-medium',\n                            ])}\n                        >\n                            {title}\n                        </span>\n                        <AssetSubline\n                            asset={asset}\n                            isLoading={isLoading}\n                            hideSize={hideSize}\n                            hideExtension={hideExtension}\n                        />\n                    </div>\n                    <div className=\"tw-p-4 tw-flex tw-flex-none tw-items-center tw-justify-center\">\n                        <span\n                            className={merge([\n                                'tw-transition-transform',\n                                isOpen ? 'tw-rotate-180 tw-text-black-90' : 'tw-text-black-60',\n                            ])}\n                        >\n                            <IconCaretDown size={IconSize.Size16} />\n                        </span>\n                    </div>\n                </div>\n            </button>\n\n            <AnimatePresence>\n                {isOpen && (\n                    <motion.div\n                        style={{\n                            width: flyoutWidth,\n                        }}\n                        className=\"tw-absolute tw-left-auto tw-w-full tw-overflow-hidden tw-box-border tw-p-0 tw-shadow-mid tw-list-none tw-m-0 tw-mt-2 tw-z-20\"\n                        data-test-id=\"asset-single-input-flyout\"\n                        key={`asset-input-menu-${menuId}`}\n                        initial={{ height: 0 }}\n                        animate={{ height: 'auto' }}\n                        exit={{ height: 0 }}\n                        transition={{ ease: [0.04, 0.62, 0.23, 0.98], duration: 0.5 }}\n                    >\n                        <FocusScope restoreFocus>\n                            <div {...overlayProps} ref={overlayRef}>\n                                <DismissButton onDismiss={() => menuState.close()} />\n                                <ActionMenu\n                                    menuBlocks={actions}\n                                    focus={focusStrategy}\n                                    onClick={() => menuState.close()}\n                                />\n                                <DismissButton onDismiss={() => menuState.close()} />\n                            </div>\n                        </FocusScope>\n                    </motion.div>\n                )}\n            </AnimatePresence>\n        </div>\n    );\n};\nSelectedAsset.displayName = 'FondueSelectedAsset';\n"],"names":["SelectedAsset","asset","size","actions","isLoading","hideSize","hideExtension","menuId","useMemoizedId","labelId","buttonRef","useRef","menuState","useMenuTriggerState","isOpen","focusStrategy","menuTriggerProps","useMenuTrigger","buttonProps","useButton","isFocusVisible","focusProps","useFocusRing","overlayRef","overlayProps","useOverlay","title","flyoutWidth","setFlyoutWidth","useState","useEffect","timer","calculateFlyoutWidth","calculatedWidth","_a","resizeObserver","jsxs","mergeProps","merge","FOCUS_STYLE","AssetInputSize","jsx","SpinningCircle","AssetThumbnail","AssetSubline","IconCaretDown","IconSize","AnimatePresence","motion","FocusScope","DismissButton","ActionMenu"],"mappings":"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"}