import { jsxs as S, jsx as e } from "react/jsx-runtime";
import { useCopy as A } from "../../hooks/useCopy.es.js";
import { useMemoizedId as tt } from "../../hooks/useMemoizedId.es.js";
import { useFocusRing as w } from "@react-aria/focus";
import { FOCUS_STYLE as p } from "../../utilities/focusStyle.es.js";
import { merge as s } from "../../utilities/merge.es.js";
import { validationClassMap as et, Validation as c } from "../../utilities/validation.es.js";
import { forwardRef as ot, useRef as rt, useState as st, useEffect as O } from "react";
import { LegacyTooltip as it } from "../LegacyTooltip/LegacyTooltip.es.js";
import nt from "../../foundation/Icon/Generated/IconCross.es.js";
import ct from "../../foundation/Icon/Generated/IconEye.es.js";
import at from "../../foundation/Icon/Generated/IconEyeOff.es.js";
import { LoadingCircle as lt, LoadingCircleSize as ut } from "../LoadingCircle/LoadingCircle.es.js";
import wt from "../../foundation/Icon/Generated/IconExclamationMarkTriangle.es.js";
import pt from "../../foundation/Icon/Generated/IconCrossCircle.es.js";
import ft from "../../foundation/Icon/Generated/IconClipboard.es.js";
import mt from "../../foundation/Icon/Generated/IconCheckMark.es.js";
var bt = /* @__PURE__ */ ((o) => (o.Text = "text", o.Password = "password", o.Number = "number", o))(bt || {});
const dt = ({ extraAction: o, disabled: n, isFocusVisible: f, focusProps: i }, x) => {
  if (!o)
    return null;
  const a = n || o.disabled;
  return /* @__PURE__ */ e(
    "button",
    {
      className: s([
        "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded tw-p-1 -tw-mr-2",
        a ? "tw-cursor-default tw-text-text-disabled" : "tw-text-text-weak hover:tw-bg-box-neutral-hover hover:tw-text-box-neutral-inverse-hover",
        f && p
      ]),
      onClick: o.onClick,
      "data-test-id": "fondue-extra-action-icon",
      "aria-label": o.title.toLowerCase(),
      disabled: a,
      "aria-disabled": a,
      type: "button",
      ref: x,
      ...i,
      children: o.icon
    }
  );
}, R = ot(dt), xt = ({
  id: o,
  type: n = "text",
  decorator: f,
  validation: i = c.Default,
  clearable: x = !1,
  placeholder: a,
  required: z,
  obfuscated: l,
  disabled: r = !1,
  autocomplete: D = !1,
  dotted: M = !1,
  value: k = "",
  copyable: W = !1,
  onChange: m,
  onEnterPressed: C,
  onBlur: $,
  onClear: F,
  onFocus: I,
  size: K,
  spellcheck: v,
  readonly: h,
  focusOnMount: N,
  selectable: U = !1,
  extraActions: g
}) => {
  const { isFocusVisible: Y, focusProps: _ } = w({ within: !0, isTextInput: !0 }), { isFocusVisible: E, focusProps: q } = w(), { isFocusVisible: P, focusProps: G } = w(), { isFocusVisible: V, focusProps: H } = w(), { isFocusVisible: B, focusProps: j } = w(), { copy: J, status: y } = A(), u = rt(null), [b, T] = st(
    typeof l == "boolean" ? l : n === "password"
    /* Password */
  );
  O(() => {
    setTimeout(() => {
      var t;
      N && ((t = u.current) == null || t.focus());
    }, 0);
  }, [N]), O(() => {
    typeof l == "boolean" && T(l);
  }, [l]);
  const Q = (t) => {
    t.key === "Enter" && C && C(t);
  }, X = () => n === "password" ? b ? "password" : "text" : n, Z = typeof v == "boolean" ? { spellCheck: v } : null;
  return /* @__PURE__ */ S(
    "div",
    {
      ..._,
      className: s([
        "tw-flex tw-items-center tw-h-9 tw-gap-2 tw-px-3 tw-border tw-transition tw-rounded tw-text-s tw-font-sans tw-relative tw-bg-white dark:tw-bg-transparent",
        M ? "tw-border-dashed" : "tw-border-solid",
        r || h ? "tw-border-black-5 tw-bg-black-5 dark:tw-bg-black-90 dark:tw-border-black-90" : s([
          "focus-within:tw-border-black-90 hover:tw-border-line-x-strong",
          et[i],
          Y && !E && !P && !V && p
        ])
      ]),
      "data-test-id": "fondue-text-input-component",
      children: [
        f && /* @__PURE__ */ e(
          "div",
          {
            className: s([
              "tw-flex tw-items-center tw-justify-center tw-pl-1",
              r ? "tw-text-black-60" : "tw-text-black-80"
            ]),
            "data-test-id": "decorator",
            children: f
          }
        ),
        /* @__PURE__ */ e(
          "input",
          {
            id: tt(o),
            ref: u,
            className: s([
              "tw-w-full tw-grow tw-border-none tw-outline-none tw-bg-transparent tw-hide-input-arrows",
              r || h ? "tw-text-black-40 tw-placeholder-black-30 dark:tw-text-black-30 dark:tw-placeholder-black-40" : "tw-text-black tw-placeholder-black-60 dark:tw-text-white"
            ]),
            onClick: () => {
              var t;
              return (t = u.current) == null ? void 0 : t.focus();
            },
            onChange: (t) => m && m(t.currentTarget.value),
            onBlur: $,
            onKeyDown: Q,
            placeholder: a,
            value: k,
            type: X(),
            required: z,
            readOnly: h,
            disabled: r,
            onFocus: (t) => {
              U && t.target.select(), I && I(t);
            },
            autoComplete: D ? "on" : "off",
            size: K,
            "data-test-id": "text-input",
            ...Z
          }
        ),
        g && g.length > 0 && g.map((t, d) => {
          const L = `text-input-extra-action-${d}`;
          return t.tooltip ? /* @__PURE__ */ e(
            it,
            {
              ...t.tooltip,
              triggerElement: /* @__PURE__ */ e(
                R,
                {
                  extraAction: t,
                  disabled: r,
                  isFocusVisible: B,
                  focusProps: j
                }
              )
            },
            L
          ) : /* @__PURE__ */ e(
            R,
            {
              extraAction: t,
              disabled: r,
              isFocusVisible: B,
              focusProps: j
            },
            L
          );
        }),
        `${k}`.length > 0 && x && /* @__PURE__ */ e(
          "button",
          {
            className: s([
              "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded",
              r ? "tw-cursor-default tw-text-black-40" : "tw-text-black-60  hover:tw-text-black-100",
              E && p
            ]),
            onClick: () => {
              var t, d;
              (t = u.current) == null || t.focus(), (d = u.current) == null || d.setAttribute("value", ""), m && m(""), F && F();
            },
            "data-test-id": "clear-icon",
            title: "Clear text input",
            "aria-label": "clear text input",
            disabled: r,
            type: "button",
            ...q,
            children: /* @__PURE__ */ e(nt, {})
          }
        ),
        n === "password" && /* @__PURE__ */ e(
          "button",
          {
            className: s([
              "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded",
              r ? "tw-cursor-default tw-text-black-40" : "tw-text-black-60 hover:tw-text-black-100",
              P && p
            ]),
            onClick: () => T(!b),
            "data-test-id": "visibility-icon",
            title: "Toggle text visibility",
            type: "button",
            "aria-label": `${b ? "unveil" : "obfuscate"} text input`,
            disabled: r,
            ...G,
            children: b ? /* @__PURE__ */ e(ct, {}) : /* @__PURE__ */ e(at, {})
          }
        ),
        i === c.Loading && /* @__PURE__ */ e("span", { className: "tw-absolute tw-top-[-0.55rem] tw-right-[-0.55rem] tw-bg-white tw-rounded-full tw-p-[2px] tw-border tw-border-black-10", children: /* @__PURE__ */ e(lt, { size: ut.ExtraSmall }) }),
        (i === c.Error || i === c.Warning) && /* @__PURE__ */ e(
          "span",
          {
            className: s([
              "tw-flex tw-items-center tw-justify-center",
              i === c.Error && "tw-text-text-negative",
              i === c.Warning && "tw-text-text-warning"
            ]),
            "data-test-id": "error-state-exclamation-mark-icon",
            children: /* @__PURE__ */ e(wt, {})
          }
        ),
        W && /* @__PURE__ */ S(
          "button",
          {
            className: s([
              "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded",
              r ? "tw-cursor-default tw-text-black-40" : "tw-text-black-60 hover:tw-text-black-100",
              V && p
            ]),
            onClick: () => J(k),
            "data-test-id": "copy-icon",
            title: "Copy input text",
            disabled: r,
            type: "button",
            ...H,
            children: [
              y === "error" && /* @__PURE__ */ e("span", { className: "tw-text-box-negative-strong", children: /* @__PURE__ */ e(pt, {}) }),
              y === "idle" && /* @__PURE__ */ e(ft, {}),
              y === "success" && /* @__PURE__ */ e("span", { className: "tw-text-box-positive-strong", children: /* @__PURE__ */ e(mt, {}) })
            ]
          }
        )
      ]
    }
  );
};
xt.displayName = "FondueTextInput";
export {
  xt as TextInput,
  bt as TextInputType
};
//# sourceMappingURL=TextInput.es.js.map
