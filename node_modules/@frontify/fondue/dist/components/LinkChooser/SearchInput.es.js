import { jsxs as v, jsx as t } from "react/jsx-runtime";
import { Validation as b, validationClassMap as y } from "../../utilities/validation.es.js";
import { useFocusRing as x } from "@react-aria/focus";
import { mergeProps as L } from "@react-aria/utils";
import { FOCUS_STYLE as h } from "../../utilities/focusStyle.es.js";
import { merge as r } from "../../utilities/merge.es.js";
import { useActor as P } from "@xstate/react";
import { forwardRef as N } from "react";
import O from "../../foundation/Icon/Generated/IconArrowOutExternal.es.js";
import E from "../../foundation/Icon/Generated/IconClipboard.es.js";
import S from "../../foundation/Icon/Generated/IconCross.es.js";
import { LoadingCircle as j, LoadingCircleSize as F } from "../LoadingCircle/LoadingCircle.es.js";
const V = N(
  ({
    disabled: e = !1,
    clearable: s = !0,
    ariaProps: a,
    selectedResult: o,
    decorator: n,
    machineService: i,
    onClear: w,
    validation: c = b.Default,
    onClick: p,
    onMouseDown: m
  }, d) => {
    const { value: f } = a, { isFocusVisible: g, focusProps: C, isFocused: I } = x({ isTextInput: !0 }), [, k] = P(i), l = c === b.Loading;
    return /* @__PURE__ */ v(
      "div",
      {
        "data-test-id": "link-chooser-search-wrapper",
        className: r([
          "tw-flex tw-items-center tw-h-9 tw-gap-2 tw-px-2.5 tw-border tw-rounded tw-text-s tw-font-sans tw-relative tw-bg-white dark:tw-bg-transparent",
          e ? "tw-border-black-5 tw-bg-black-5 dark:tw-bg-black-90 dark:tw-border-black-90" : r([
            "focus-within:tw-border-black-100",
            g && h,
            y[c]
          ])
        ]),
        onClick: p,
        onMouseDown: m,
        children: [
          n && /* @__PURE__ */ t(
            "div",
            {
              className: r([
                "tw-flex tw-items-center tw-justify-center tw-flex-none",
                e || !o ? "tw-text-black-40" : "tw-text-violet-60"
              ]),
              "data-test-id": "link-chooser-decorator-icon",
              children: n
            }
          ),
          /* @__PURE__ */ t(
            "input",
            {
              ...L(C, a),
              readOnly: !I,
              ref: d,
              className: r([
                "tw-flex-auto tw-border-none tw-outline-none tw-bg-transparent tw-hide-input-arrows tw-min-w-0 tw-whitespace-nowrap tw-truncate",
                e ? "tw-text-black-40 tw-placeholder-black-30 dark:tw-text-black-30 dark:tw-placeholder-black-40" : "tw-text-black tw-placeholder-black-60 dark:tw-text-white"
              ]),
              value: f,
              disabled: e,
              "data-test-id": "link-chooser-search-input"
            }
          ),
          o && !l && /* @__PURE__ */ t(
            u,
            {
              disabled: e,
              testId: "link-chooser-preview-icon",
              title: "Preview link",
              ariaLabel: "preview link",
              icon: /* @__PURE__ */ t(O, {}),
              onClick: () => k("OPEN_PREVIEW")
            }
          ),
          o && !l && /* @__PURE__ */ t(
            u,
            {
              disabled: e,
              testId: "link-chooser-copy-icon",
              title: "Copy text to clipboard",
              ariaLabel: "copy text to clipboard",
              icon: /* @__PURE__ */ t(E, {}),
              onClick: () => k("COPY_TO_CLIPBOARD")
            }
          ),
          `${f}`.length > 0 && s && !l && /* @__PURE__ */ t(
            u,
            {
              disabled: e,
              testId: "link-chooser-clear-icon",
              title: "Clear text input",
              ariaLabel: "clear text input",
              icon: /* @__PURE__ */ t(S, {}),
              isComboBoxControl: !0,
              onClick: w
            }
          ),
          l && /* @__PURE__ */ t("span", { className: "tw-flex tw-flex-none tw-justify-center tw-align-center", children: /* @__PURE__ */ t(j, { size: F.ExtraSmall }) })
        ]
      }
    );
  }
);
V.displayName = "SearchInput";
const u = ({
  disabled: e,
  title: s,
  ariaLabel: a,
  testId: o,
  icon: n,
  onClick: i,
  isComboBoxControl: w
}) => {
  const { isFocusVisible: c, focusProps: p } = x(), m = (d) => {
    d.stopPropagation(), i && i();
  };
  return /* @__PURE__ */ t(
    "button",
    {
      className: r([
        "tw-flex tw-items-center tw-justify-center tw-transition-colors tw-rounded tw-flex-none",
        e ? "tw-cursor-default tw-text-black-40" : "tw-text-black-80  hover:tw-text-black-100",
        c && h
      ]),
      "data-test-id": o,
      title: s,
      "aria-label": a,
      "data-combo-box-control": w,
      disabled: e,
      onClick: m,
      type: "button",
      ...p,
      children: n
    }
  );
};
export {
  V as SearchInput
};
//# sourceMappingURL=SearchInput.es.js.map
