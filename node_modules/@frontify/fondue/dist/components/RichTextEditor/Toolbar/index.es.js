import { jsx as t } from "react/jsx-runtime";
import { usePlateEditorRef as h } from "@udecode/plate";
import { useEditorResizeContext as W } from "../context/EditorResizeContext.es.js";
import { useRichTextEditorContext as G } from "../context/RichTextEditorContext.es.js";
import { EditorPositioningWrapper as b } from "../EditorPositioningWrapper/index.es.js";
import { getButtonGroupWidths as g, getButtonGroupsPerRow as P } from "./utils.es.js";
import { ButtonGroupWrapper as R } from "./ButtonGroupWrapper.es.js";
const N = ({ toolbarButtons: d, editorId: o, toolbarWidth: r }) => {
  const m = h(o), { editorWidth: i } = W(), { position: e } = G(), u = r || i || 0, a = g(d.at(e)), n = P(u, a), c = b[e];
  return /* @__PURE__ */ t(
    c.ToolbarWrapper,
    {
      editorWidth: i,
      toolbarWidth: r,
      toolbarButtonGroups: n,
      children: n.map((l, f) => /* @__PURE__ */ t("div", { className: "tw-divide-x tw-divide-line tw-flex tw-w-full tw-flex-wrap", children: l.map(({ group: w, index: p }) => /* @__PURE__ */ t(R, { index: p, children: w.map((s, x) => /* @__PURE__ */ t(
        s.button,
        {
          editor: m,
          editorId: o,
          id: s.id
        },
        x.toString()
      )) }, p)) }, f))
    }
  );
};
export {
  N as Toolbar
};
//# sourceMappingURL=index.es.js.map
