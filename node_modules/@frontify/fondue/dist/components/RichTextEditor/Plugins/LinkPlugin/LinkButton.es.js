import { jsx as t } from "react/jsx-runtime";
import { getHotkeyByPlatform as i } from "../../helpers/getHotkeyByPlatform.es.js";
import { getTooltip as a } from "../../helpers/getTooltip.es.js";
import { usePlateEditorState as l, useEventPlateId as m, isRangeInSameBlock as c, LinkToolbarButton as p } from "@udecode/plate";
import { ButtonWrapper as u, IconStylingWrapper as f, buttonStyles as k, getButtonClassNames as b } from "../helper.es.js";
import d from "../../../../foundation/Icon/Generated/IconLink16.es.js";
const x = ({ id: e, editorId: r }) => {
  const o = l(m(r)), n = !!c(o, {
    at: o.selection
  }), s = b(n);
  return /* @__PURE__ */ t(u, { id: e, children: /* @__PURE__ */ t(
    p,
    {
      tooltip: a(
        n ? `Link
${i("Ctrl+K")}` : "Links can only be set for a single text block."
      ),
      icon: /* @__PURE__ */ t(f, { icon: /* @__PURE__ */ t(d, {}) }),
      classNames: s,
      styles: k,
      actionHandler: "onMouseDown"
    }
  ) });
};
export {
  x as LinkButton
};
//# sourceMappingURL=LinkButton.es.js.map
