import { jsx as w } from "react/jsx-runtime";
import { getMark as a, someNode as r, setMarks as l, toggleNodeType as i, getAboveNode as p, ELEMENT_LI as c } from "@udecode/plate";
import { MARK_TEXT_STYLE as n } from "../../ListPlugin/ListPlugin.es.js";
import { merge as x } from "../../../../../utilities/merge.es.js";
import { ELEMENT_CHECK_ITEM as u } from "../../CheckboxListPlugin/id.es.js";
const b = (t) => p(t, {
  match: { type: c },
  mode: "lowest"
}) || r(t, {
  match: { type: u },
  mode: "lowest"
}), g = ({ editor: t, type: e, children: m }) => {
  const s = t != null && t.selection ? a(t, n) === e.id : r(t, { match: { type: e } });
  return /* @__PURE__ */ w(
    "button",
    {
      "data-test-id": "textstyle-option",
      type: "button",
      className: x([
        "tw-block tw-w-full tw-text-left tw-px-3 tw-py-2 tw-outline-none tw-cursor-pointer tw-truncate hover:tw-bg-box-neutral-hover hover:w-text-box-neutral-inverse-hover tw-max-h-20 tw-max-w-[15rem] tw-min-h-[2.25rem]",
        s ? "tw-text-box-neutral-inverse tw-bg-box-neutral" : "tw-text-text"
      ]),
      onMouseDown: (o) => {
        o.preventDefault(), o.stopPropagation(), !(!t || !t.selection) && (l(t, { [n]: e.id }), b(t) || i(t, {
          activeType: e.id,
          inactiveType: e.id
        }));
      },
      children: m
    }
  );
};
export {
  g as DropdownItem
};
//# sourceMappingURL=DropdownItem.es.js.map
