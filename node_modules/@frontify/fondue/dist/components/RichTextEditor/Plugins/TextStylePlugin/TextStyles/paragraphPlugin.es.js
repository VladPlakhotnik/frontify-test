var i = Object.defineProperty;
var u = (t, r, e) => r in t ? i(t, r, { enumerable: !0, configurable: !0, writable: !0, value: e }) : t[r] = e;
var p = (t, r, e) => (u(t, typeof r != "symbol" ? r + "" : r, e), e);
import { jsx as m } from "react/jsx-runtime";
import { createPluginFactory as c, createParagraphPlugin as g } from "@udecode/plate";
import { alignmentClassnames as P } from "../../helper.es.js";
import { merge as f } from "../../../../../utilities/merge.es.js";
import { TextStyles as o } from "../types.es.js";
import { Plugin as y } from "../../Plugin.es.js";
import { defaultStyles as h } from "../../../utils/defaultStyles.es.js";
import { getColumnBreakClasses as x } from "../../ColumnBreakPlugin/utils/getColumnBreakClasses.es.js";
import { MarkupElement as k } from "../../MarkupElement.es.js";
class F extends y {
  constructor({ styles: e = h.p, ...a } = {}) {
    super(o.p, {
      markupElement: new d(),
      label: "Body Text",
      ...a
    });
    p(this, "styles", {});
    this.styles = e;
  }
  plugins() {
    return [S(this.styles)];
  }
}
const E = "tw-m-0 tw-px-0 tw-py-0", s = ({ element: t, attributes: r, children: e, styles: a }) => {
  const n = t.align, l = f([n && P[n], E, x(t)]);
  return /* @__PURE__ */ m("p", { ...r, className: l, style: a, children: e });
};
class d extends k {
  constructor(r = o.p, e = s) {
    super(r, e);
  }
}
const S = (t) => c({
  ...g(),
  key: o.p,
  isElement: !0,
  component: s
})({
  component: (r) => /* @__PURE__ */ m(s, { ...r, styles: t })
});
export {
  E as PARAGRAPH_CLASSES,
  d as ParagraphMarkupElement,
  s as ParagraphMarkupElementNode,
  F as ParagraphPlugin,
  S as createParagraphPlugin
};
//# sourceMappingURL=paragraphPlugin.es.js.map
