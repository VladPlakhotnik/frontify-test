var a = Object.defineProperty;
var i = (s, t, e) => t in s ? a(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;
var l = (s, t, e) => (i(s, typeof t != "symbol" ? t + "" : t, e), e);
import { jsx as u } from "react/jsx-runtime";
import { createPluginFactory as c } from "@udecode/plate";
import { alignmentClassnames as p } from "../../helper.es.js";
import { merge as g } from "../../../../../utilities/merge.es.js";
import { TextStyles as m } from "../types.es.js";
import { Plugin as f } from "../../Plugin.es.js";
import { MarkupElement as y } from "../../MarkupElement.es.js";
import { getColumnBreakClasses as C } from "../../ColumnBreakPlugin/utils/getColumnBreakClasses.es.js";
import { defaultStyles as d } from "../../../utils/defaultStyles.es.js";
const k = "textstyle-custom1-plugin";
class B extends f {
  constructor({ styles: e = d.custom1, ...o } = {}) {
    super(m.custom1, {
      label: "Custom 1",
      markupElement: new x(),
      ...o
    });
    l(this, "styles", {});
    this.styles = e;
  }
  plugins() {
    return [E(this.styles)];
  }
}
class x extends y {
  constructor(t = k, e = n) {
    super(t, e);
  }
}
const n = ({ element: s, attributes: t, children: e, styles: o }) => {
  const r = s.align;
  return /* @__PURE__ */ u(
    "p",
    {
      ...t,
      className: g([r && p[r], C(s)]),
      style: o,
      children: e
    }
  );
}, E = (s) => c({
  key: m.custom1,
  isElement: !0,
  deserializeHtml: {
    rules: [{ validClassName: m.custom1 }]
  }
})({
  component: (t) => /* @__PURE__ */ u(n, { ...t, styles: s })
});
export {
  B as Custom1Plugin
};
//# sourceMappingURL=custom1Plugin.es.js.map
