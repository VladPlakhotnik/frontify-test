import { jsx as s } from "react/jsx-runtime";
import { useState as w, useRef as h, useEffect as c } from "react";
import { BalloonToolbar as p, flip as b, shift as v, autoUpdate as S } from "@udecode/plate";
import { calculateToolbarWidth as E } from "../../utils/calculateToolbarWidth.es.js";
import { OFFSET_IN_PX as F } from "../../utils/constants.es.js";
const W = ({
  children: l,
  editorWidth: d,
  toolbarButtonGroups: o = [],
  toolbarWidth: i
}) => {
  const [f, a] = w(), r = h();
  c(() => {
    if (i)
      a(i);
    else {
      const e = E(o);
      e > 0 && a(e + o.length + F);
    }
  }, [d, i, o]), c(() => {
    const e = () => {
      const t = window.getSelection(), n = (t == null ? void 0 : t.rangeCount) ?? 0, m = n > 0 && (t == null ? void 0 : t.getRangeAt(0).startOffset), u = n > 0 && (t == null ? void 0 : t.getRangeAt(0).endOffset);
      !(!!t && m !== u && n > 0) && r.current && r.current();
    };
    return document.addEventListener("selectionchange", e), () => document.removeEventListener("selectionchange", e);
  }, []);
  const g = (e, t, n) => {
    r.current = S(e, t, n);
  };
  return /* @__PURE__ */ s(
    p,
    {
      floatingOptions: {
        middleware: [b(), v()],
        whileElementsMounted: g
      },
      styles: { root: { border: "none", background: "#ffffff", width: f, transitionDuration: "0s" } },
      children: /* @__PURE__ */ s(
        "div",
        {
          "data-selector": "toolbar-floating",
          "data-test-id": "toolbar-floating",
          className: "tw-rounded tw-min-h-12 tw-border tw-border-line tw-shadow-lg tw-bg-base tw-divide-y tw-divide-line tw-flex tw-flex-wrap",
          children: l
        }
      )
    }
  );
};
export {
  W as ToolbarWrapperPositioningFloating
};
//# sourceMappingURL=ToolbarWrapperPositioningFloating.es.js.map
