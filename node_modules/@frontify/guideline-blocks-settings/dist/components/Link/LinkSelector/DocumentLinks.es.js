import { jsx as i, Fragment as v } from "react/jsx-runtime";
import { useState as r, useEffect as d } from "react";
import { DocumentLink as A } from "./DocumentLink.es.js";
import { LoadingIndicator as h } from "./LoadingIndicator.es.js";
const F = ({ appBridge: n, selectedUrl: e, onSelectUrl: m }) => {
  const [u, l] = r(!0), [f, I] = r([]), [g, D] = r({
    documentId: void 0,
    pageId: void 0
  }), o = [...f.values()];
  d(() => {
    e && o.length > 0 && p().then((t) => {
      D(t);
    });
  }, [o.length]), d(() => {
    n.getAllDocuments().then((t) => {
      I(t);
    }).finally(() => {
      l(!1);
    });
  }, []);
  const p = async () => {
    const t = {
      documentId: void 0,
      pageId: void 0
    };
    if (o.find((s) => s.permanentLink === e))
      return t;
    for (const s of o) {
      const y = await n.getDocumentPagesByDocumentId(s.id);
      n.getAllDocuments();
      const a = [...y.values()];
      if (!!a.find((c) => c.permanentLink === e))
        return t.documentId = s.id, t;
      for (const c of a)
        if (!![...(await n.getDocumentSectionsByDocumentPageId(c.id)).values()].find((L) => L.permanentLink === e))
          return t.documentId = s.id, t.pageId = c.id, t;
    }
    return t;
  };
  return u ? /* @__PURE__ */ i(h, {}) : /* @__PURE__ */ i(v, { children: o.map((t) => /* @__PURE__ */ i(
    A,
    {
      document: t,
      appBridge: n,
      selectedUrl: e,
      onSelectUrl: m,
      itemsToExpandInitially: g
    },
    t.id
  )) });
};
export {
  F as DocumentLinks
};
//# sourceMappingURL=DocumentLinks.es.js.map
