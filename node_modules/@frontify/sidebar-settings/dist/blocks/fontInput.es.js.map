{"version":3,"file":"fontInput.es.js","sources":["../../src/blocks/fontInput.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Choice } from '.';\nimport type { BaseBlock } from './base';\n\n/**\n * The origin of the font.\n */\nexport enum FontProvider {\n    Google = 'Google',\n    Selfhosted = 'Selfhosted',\n    System = 'System',\n}\n\nexport enum PaddingSizes {\n    Auto = 'auto',\n    S = 's',\n    M = 'm',\n    L = 'l',\n}\n\nexport enum BorderRadius {\n    None = 'none',\n    S = 's',\n    M = 'm',\n    L = 'l',\n}\n\nexport enum TextAlignment {\n    Left = 'left',\n    Center = 'center',\n    Right = 'right',\n}\n\nexport type FontValuePaddingType = {\n    top: string;\n    right: string;\n    bottom: string;\n    left: string;\n};\n\nexport type FontValueBorderRadiusType = {\n    topLeft: string;\n    topRight: string;\n    bottomRight: string;\n    bottomLeft: string;\n};\n\nexport type FontInputBlockChoice = { id?: number | string } & Choice;\n\nexport type FontInputChoicePresetValues = Partial<\n    Record<'aligmentChoiceValues' | 'borderRadiusChoiceValues' | 'paddingSizeChoiceValues', FontInputBlockChoice[]>\n>;\n\nexport type FontValue = {\n    /**\n     * The origin of the font.\n     */\n    fontProvider: FontProvider | `${FontProvider}`;\n\n    /**\n     * The identifier of the font family.\n     */\n    fontFamily: string | number;\n\n    /**\n     * The rgba-color of the text.\n     */\n    color?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font (100-1000, increment of 100).\n     */\n    weight: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000;\n\n    /**\n     * The size of the font.\n     */\n    size?: string;\n\n    /**\n     * The letter spacing of the text.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The line height of the text.\n     */\n    lineHeight?: string;\n\n    /**\n     * The margin top of the text.\n     */\n    marginTop?: string;\n\n    /**\n     * The margin bottom of the text.\n     */\n    marginBottom?: string;\n\n    /**\n     * Whether the font should be uppercase or not.\n     */\n    uppercase: boolean;\n\n    /**\n     * Whether the font should be italic or not.\n     */\n    italic: boolean;\n\n    /**\n     * Whether the font should be underlined or not.\n     */\n    underline: boolean;\n\n    /**\n     * Where the text is anchor, not quite alignment but similar of the text\n     */\n    alignment?: TextAlignment;\n\n    /**\n     * Whether the text has highlight (backgound color).\n     */\n    highlight?: boolean;\n\n    /**\n     * The highlight color.\n     */\n    highlightColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * Padding around the text.\n     */\n    highlightPaddingCustomEnabled?: boolean;\n    highlightPaddingCustom?: FontValuePaddingType | null;\n    highlightPaddingChoice?: PaddingSizes;\n\n    /**\n     * Highlight border radius.\n     */\n    highlightBorderRadiusCustomEnabled?: boolean;\n    highlightBorderRadiusCustom?: FontValueBorderRadiusType | null;\n    highlightBorderRadiusChoice?: BorderRadius;\n\n    /**\n     * The rgba-color of the text on hover.\n     */\n    hoverColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font on hover (100-1000, increment of 100).\n     */\n    hoverWeight?: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000 | null;\n\n    /**\n     * The size of the font on hover.\n     */\n    hoverSize?: string;\n\n    /**\n     * The letter spacing of the text on hover.\n     */\n    hoverLetterSpacing?: string;\n\n    /**\n     * The line height of the text on hover.\n     */\n    hoverLineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not on hover.\n     */\n    hoverUppercase?: boolean;\n\n    /**\n     * Whether the font should be italic or not on hover.\n     */\n    hoverItalic?: boolean;\n\n    /**\n     * Whether the font should be underlined or not on hover.\n     */\n    hoverUnderline?: boolean;\n\n    /**\n     * Whether the text has highlight (backgound color) on hover.\n     */\n    hoverHighlight?: boolean;\n\n    /**\n     * The highlight color of the text on hover.\n     */\n    hoverHighlightColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * Padding around the text on hover.\n     */\n    hoverHighlightPaddingCustomEnabled?: boolean;\n    hoverHighlightPaddingCustom?: FontValuePaddingType | null;\n    hoverHighlightPaddingChoice?: PaddingSizes;\n\n    /**\n     * Highlight border radius on hover.\n     */\n    hoverHighlightBorderRadiusCustomEnabled?: boolean;\n    hoverHighlightBorderRadiusCustom?: FontValueBorderRadiusType | null;\n    hoverHighlightBorderRadiusChoice?: BorderRadius;\n\n    /**\n     * The color of the text when active.\n     */\n    activeColor?: {\n        /**\n         * The red value of the background color when active (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the background color when active (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the background color when active (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color when active (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * The weight of the font when active (100-1000, increment of 100).\n     */\n    activeWeight?: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000 | null;\n\n    /**\n     * The size of the font when active.\n     */\n    activeSize?: string;\n\n    /**\n     * The letter spacing of the text when active.\n     */\n    activeLetterSpacing?: string;\n\n    /**\n     * The line height of the text when active.\n     */\n    activeLineHeight?: string;\n\n    /**\n     * Whether the font should be uppercase or not when active.\n     */\n    activeUppercase?: boolean;\n\n    /**\n     * Whether the font should be italic or not when active.\n     */\n    activeItalic?: boolean;\n\n    /**\n     * Whether the font should be underlined or not when active.\n     */\n    activeUnderline?: boolean;\n\n    /**\n     * Whether the text has highlight (backgound color) when active.\n     */\n    activeHighlight?: boolean;\n\n    /**\n     * The highlight of the text when active.\n     */\n    activeHighlightColor?: {\n        /**\n         * The red value of the color (0-255).\n         */\n        red: number;\n        /**\n         * The green value of the color (0-255).\n         */\n        green: number;\n        /**\n         * The blue value of the color (0-255).\n         */\n        blue: number;\n        /**\n         * The alpha value of the color (0-1).\n         */\n        alpha?: number;\n    } | null;\n\n    /**\n     * Padding around the text when active.\n     */\n    activeHighlightPaddingCustomEnabled?: boolean;\n    activeHighlightPaddingCustom?: FontValuePaddingType | null;\n    activeHighlightPaddingChoice?: PaddingSizes;\n\n    /**\n     * Highlight border radius when active.\n     */\n    activeHighlightBorderRadiusCustomEnabled?: boolean;\n    activeHighlightBorderRadiusCustom?: FontValueBorderRadiusType | null;\n    activeHighlightBorderRadiusChoice?: BorderRadius;\n};\n\nexport type FontInputBlock<AppBridge> = {\n    /**\n     * The setting type.\n     */\n    type: 'fontInput';\n\n    /**\n     * The text to be displayed in the setting.\n     * @default \"Lorem Ipsum\"\n     */\n    placeholder?: string;\n\n    /**\n     * Choice values presets:\n     *    paddingSizeChoiceValues: choices values for padding sizes choices\n     *    borderRadiusChoiceValues: choices values for border radius choices\n     *    aligmentChoiceValues: text alignment choices\n     */\n    choicePresets?: FontInputChoicePresetValues;\n\n    /**\n     * `Default` tab will be always visible if there are fields enabled and defined in the defaultValues fontInput block.\n     * Whether any of these StateTab flags are enabled Default and the set tabs will be shown.\n     */\n    showHoverStateTab?: boolean;\n    showActiveStateTab?: boolean;\n} & BaseBlock<AppBridge, FontValue>;\n"],"names":["FontProvider","PaddingSizes","BorderRadius","TextAlignment"],"mappings":"AAQY,IAAAA,sBAAAA,OACRA,EAAA,SAAS,UACTA,EAAA,aAAa,cACbA,EAAA,SAAS,UAHDA,IAAAA,KAAA,CAAA,CAAA,GAMAC,sBAAAA,OACRA,EAAA,OAAO,QACPA,EAAA,IAAI,KACJA,EAAA,IAAI,KACJA,EAAA,IAAI,KAJIA,IAAAA,KAAA,CAAA,CAAA,GAOAC,sBAAAA,OACRA,EAAA,OAAO,QACPA,EAAA,IAAI,KACJA,EAAA,IAAI,KACJA,EAAA,IAAI,KAJIA,IAAAA,KAAA,CAAA,CAAA,GAOAC,sBAAAA,OACRA,EAAA,OAAO,QACPA,EAAA,SAAS,UACTA,EAAA,QAAQ,SAHAA,IAAAA,KAAA,CAAA,CAAA;"}