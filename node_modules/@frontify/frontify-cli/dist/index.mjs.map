{"version":3,"file":"index.mjs","sources":["../src/utils/date.ts","../src/utils/logger.ts","../src/errors/ParseJsonError.ts","../src/errors/FileNotFoundError.ts","../src/utils/reactiveJson.ts","../src/utils/appBridgeVersion.ts","../src/utils/compiler.ts","../src/utils/configuration.ts","../src/utils/file.ts","../src/errors/HttpClientError.ts","../src/utils/httpClient.ts","../src/utils/npm.ts","../src/errors/CommandExecutionError.ts","../src/utils/promiseExec.ts","../src/errors/InvalidInstanceUrlError.ts","../src/utils/url.ts","../src/utils/user.ts","../src/commands/createContentBlock.ts","../src/commands/createPlatformApp.ts","../src/commands/deploy.ts","../src/commands/login.ts","../src/commands/logout.ts","../src/commands/serve.ts","../src/index.ts"],"sourcesContent":["/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nexport const getCurrentTime = (): string => {\n    const now = new Date();\n    return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(\n        now.getSeconds(),\n    ).padStart(2, '0')}`;\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport pc from 'picocolors';\nimport { getCurrentTime } from './date.js';\n\nexport class Logger {\n    static defaultInfo(...messages: string[]): void {\n        console.log(Logger.spacer(10), ...messages);\n    }\n\n    static info(...messages: string[]): void {\n        console.log(`[${getCurrentTime()}] ${messages.join(' ')}`);\n    }\n\n    static success(...messages: string[]): void {\n        console.log(`[${getCurrentTime()}] ${pc.green(messages.join(' '))}`);\n    }\n\n    static error(...messages: string[]): void {\n        console.error(pc.red(`[${getCurrentTime()}] ${messages.join(' ')}`));\n    }\n\n    static spacer(width = 1): string {\n        return Array(width + 1).join(' ');\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Logger } from '../utils/logger.js';\n\nexport default class ParseJsonError extends Error {\n    readonly name = 'ParseJsonError';\n    constructor(path: string) {\n        super();\n        Logger.error(`The file at \"${path}\" could not be parsed.`);\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Logger } from '../utils/logger.js';\n\nexport default class FileNotFoundError extends Error {\n    readonly name = 'FileNotFoundError';\n    constructor(path: string) {\n        super();\n        Logger.error(`The file at \"${path}\" was not found.`);\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { readFileSync, writeFileSync } from 'node:fs';\nimport ParseJsonError from '../errors/ParseJsonError.js';\nimport FileNotFoundError from '../errors/FileNotFoundError.js';\n\nexport const reactiveJson = <T>(path: string): T => {\n    try {\n        const jsonRaw = readFileSync(path, 'utf8');\n        const jsonParsed = JSON.parse(jsonRaw);\n\n        return new Proxy(jsonParsed, {\n            set: (obj, prop, value) => {\n                obj[prop] = value;\n\n                const jsonString = JSON.stringify(obj, null, '\\t');\n\n                writeFileSync(path, jsonString);\n\n                return true;\n            },\n        });\n    } catch (error) {\n        if (error instanceof SyntaxError) {\n            throw new ParseJsonError(path);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } else if ((error as any).code === 'ENOENT') {\n            throw new FileNotFoundError(path);\n        }\n\n        throw new Error(error as string);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { join } from 'node:path';\nimport { reactiveJson } from './reactiveJson.js';\nimport { PackageJson } from './npm.js';\n\nexport const getAppBridgeVersion = (rootPath: string) => {\n    const packageJson = reactiveJson<PackageJson>(join(rootPath, 'package.json'));\n    return packageJson.dependencies['@frontify/app-bridge'];\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport react from '@vitejs/plugin-react';\nimport { build } from 'vite';\nimport { viteExternalsPlugin } from 'vite-plugin-externals';\nimport { createHash } from 'crypto';\nimport { getAppBridgeVersion } from './appBridgeVersion.js';\n\nexport type CompilerOptions = {\n    projectPath: string;\n    entryFile: string;\n    outputName: string;\n};\n\nexport const compileBlock = async ({ projectPath, entryFile, outputName }: CompilerOptions) => {\n    const appBridgeVersion = getAppBridgeVersion(projectPath);\n    return build({\n        plugins: [\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            react(),\n            viteExternalsPlugin({\n                react: 'React',\n                'react-dom': 'ReactDOM',\n            }),\n        ],\n        define: {\n            'process.env.NODE_ENV': JSON.stringify('production'),\n        },\n        root: projectPath,\n        build: {\n            lib: {\n                name: outputName,\n                entry: entryFile,\n                formats: ['iife'],\n                fileName: () => 'index.js',\n            },\n            rollupOptions: {\n                external: ['react', 'react-dom'],\n                output: {\n                    globals: {\n                        react: 'React',\n                        'react-dom': 'ReactDOM',\n                    },\n                    footer: `\n                        window.${outputName} = ${outputName}; \n                        window.${outputName}.dependencies = window.${outputName}.packages || {};\n                        window.${outputName}.dependencies['@frontify/app-bridge'] = '${appBridgeVersion}';\n                    `,\n                },\n            },\n        },\n    });\n};\n\nexport const compilePlatformApp = async ({ outputName, projectPath = '' }: CompilerOptions) => {\n    const getHash = (text) => createHash('sha256').update(text).digest('hex');\n    const htmlHashPlugin = {\n        name: 'html-hash',\n        enforce: 'post',\n        transformIndexHtml(html, { bundle }) {\n            const cssFileName = `${outputName}.${getHash(bundle['index.css'].source)}.css`;\n            const jsFileName = `${outputName}.${getHash(bundle['index.js'].code)}.js`;\n\n            html = html.replace('index.css', cssFileName).replace('index.js', jsFileName);\n            return html;\n        },\n        generateBundle(options, bundle) {\n            bundle['index.html'].fileName = `${outputName}.${getHash(bundle['index.html'].source)}.html`;\n            bundle['index.css'].fileName = `${outputName}.${getHash(bundle['index.css'].source)}.css`;\n            bundle['index.js'].fileName = `${outputName}.${getHash(bundle['index.js'].code)}.js`;\n        },\n    };\n\n    return build({\n        plugins: [\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            react(),\n            htmlHashPlugin,\n        ],\n        root: projectPath,\n        build: {\n            rollupOptions: {\n                output: {\n                    assetFileNames: () => '[name][extname]',\n                    chunkFileNames: '[name].js',\n                    entryFileNames: '[name].js',\n                },\n            },\n        },\n    });\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport Conf from 'conf';\n\nexport class Configuration {\n    private static readonly conf = new Conf<Record<string, string | undefined>>({\n        projectName: 'frontify-cli',\n    });\n\n    static set(key: string, value: unknown): void {\n        this.conf.set(key, value);\n    }\n\n    static get(key: string): string | undefined {\n        return this.conf.get(key, undefined);\n    }\n\n    static delete(key: string): void {\n        return this.conf.delete(key);\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { copyFileSync, mkdirSync, readFileSync, readdirSync, statSync } from 'node:fs';\nimport { resolve } from 'node:path';\nimport globToRegExp from 'glob-to-regexp';\nimport FileNotFoundError from '../errors/FileNotFoundError.js';\n\nexport const isDirectoryEmpty = (folderPath: string): boolean => {\n    try {\n        return readdirSync(folderPath).length === 0;\n    } catch {\n        return true;\n    }\n};\n\nexport const copyFolder = (\n    sourceFolderPath: string,\n    destinationFolderPath: string,\n    options?: { exclude: string[] },\n) => {\n    mkdirSync(destinationFolderPath, { recursive: true });\n    const excludePatterns = options?.exclude.map((glob) => globToRegExp(glob));\n\n    for (const file of readdirSync(sourceFolderPath)) {\n        if (excludePatterns !== undefined && excludePatterns.some((re) => re.test(file))) {\n            continue;\n        }\n        const srcFile = resolve(sourceFolderPath, file);\n        const destFile = resolve(destinationFolderPath, file);\n        copyFile(srcFile, destFile);\n    }\n};\n\nexport const copyFile = (sourceFilePath: string, destinationFilePath: string) => {\n    const stat = statSync(sourceFilePath);\n    if (stat.isDirectory()) {\n        copyFolder(sourceFilePath, destinationFilePath);\n    } else {\n        copyFileSync(sourceFilePath, destinationFilePath);\n    }\n};\n\nexport const readFile = (filePath: string): string => {\n    try {\n        return readFileSync(filePath, 'utf-8');\n    } catch {\n        throw new FileNotFoundError(filePath);\n    }\n};\n\nexport const readFileAsBase64 = (filePath: string): string => {\n    try {\n        return readFileSync(filePath, 'base64');\n    } catch {\n        throw new FileNotFoundError(filePath);\n    }\n};\n\nexport const readFileLinesAsArray = (filePath: string): string[] => {\n    try {\n        const content = readFile(filePath);\n        return content.split(/\\r?\\n/).filter((line) => line !== '');\n    } catch {\n        throw new FileNotFoundError(filePath);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nexport class HttpClientError extends Error {\n    public code = 0;\n    public responseBody: { sucess: false; error: string };\n\n    constructor(code: number, responseBody: { sucess: false; error: string }) {\n        super(`Status code ${code}`);\n        this.name = 'HttpClientError';\n        this.code = code;\n        this.responseBody = responseBody;\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport fetch from 'node-fetch';\nimport { HttpClientError } from '../errors/HttpClientError.js';\n\ninterface RequestOptions {\n    headers?: {\n        Authorization?: string;\n    };\n}\n\ninterface FetchParameters {\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n    url: string;\n    body?: Record<string, unknown>;\n    options?: RequestOptions;\n}\n\nexport class HttpClient {\n    private readonly baseUrl: string;\n\n    constructor(baseUrl: string) {\n        this.baseUrl = baseUrl.replace(/^https?:\\/\\//, '');\n    }\n\n    private async fetchExtended<T>({ method, url, body, options }: FetchParameters): Promise<T> {\n        const response = await fetch(this.getAbsoluteUrl(url), {\n            method,\n            ...(body && {\n                body: JSON.stringify(body),\n            }),\n            ...options,\n            headers: { 'Content-Type': 'application/json', ...options?.headers },\n        });\n\n        if (response.status === 200) {\n            const contentType = response.headers.get('Content-Type');\n\n            switch (contentType) {\n                case 'application/json':\n                    const responseJson = await response.json();\n                    if (!responseJson) {\n                        return undefined as T;\n                    }\n                    return responseJson as T;\n                default:\n                    const responseText = await response.text();\n                    if (!responseText) {\n                        return undefined as T;\n                    }\n                    return responseText as T;\n            }\n        } else {\n            const errorData = (await response.json()) as { sucess: false; error: string };\n            throw new HttpClientError(response.status, errorData);\n        }\n    }\n\n    public get<T>(url: string, options?: RequestOptions): Promise<T> {\n        return this.fetchExtended<T>({ url, method: 'GET', options });\n    }\n\n    public post<T>(url: string, body?: Record<string, unknown>, options?: RequestOptions): Promise<T> {\n        return this.fetchExtended({ url, method: 'POST', body, options });\n    }\n\n    public put<T>(url: string, body?: Record<string, unknown>, options?: RequestOptions): Promise<T> {\n        return this.fetchExtended({ url, method: 'PUT', body, options });\n    }\n\n    public delete<T>(url: string, options?: RequestOptions): Promise<T> {\n        return this.fetchExtended({ url, method: 'DELETE', options });\n    }\n\n    private getAbsoluteUrl(relativeUrl: string): string {\n        return `https://${this.baseUrl}${relativeUrl}`;\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { resolve } from 'node:path';\n\nimport { isDirectoryEmpty } from './file.js';\nimport { reactiveJson } from './reactiveJson.js';\n\nexport type PackageJson = {\n    name: string;\n    version: string;\n    main: string;\n    dependencies: Record<string, string>;\n};\n\nexport const updatePackageJsonProjectName = (folderPath: string): void => {\n    const packageJsonPath = resolve(folderPath, 'package.json');\n    const packageJson = reactiveJson<PackageJson>(packageJsonPath);\n    packageJson.name = folderPath;\n};\n\nexport const isValidName = (folderName: string): true | string => {\n    if (!folderName) {\n        return 'The content block name can not be empty.';\n    } else if (!/^[_a-z-]+$/.test(folderName)) {\n        return 'The project name needs to be \"a-z\" separated by \"-\" or \"_\".';\n    } else if (!isDirectoryEmpty(folderName)) {\n        return `The directory ./${folderName} already exist.`;\n    } else {\n        return true;\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Logger } from '../utils/logger.js';\n\nexport default class CommandExecutionError extends Error {\n    readonly name = 'CommandExecutionError';\n    constructor(error: string) {\n        super();\n        Logger.error(`The command execution failed: ${error}`);\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { ExecOptions, exec } from 'node:child_process';\nimport CommandExecutionError from '../errors/CommandExecutionError.js';\n\nexport const promiseExec = (command: string, options: ExecOptions = {}): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        exec(command, options, (error, stdout) => {\n            if (error) {\n                return reject(new CommandExecutionError(error + stdout));\n            } else {\n                return resolve(stdout);\n            }\n        });\n    });\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Logger } from '../utils/logger.js';\n\nexport default class InvalidInstanceUrlError extends Error {\n    readonly name = 'InvalidInstanceUrlError';\n    constructor(url: string) {\n        super();\n        if (url) {\n            Logger.error(`The given URL \"${url}\" is invalid.`);\n        } else {\n            Logger.error('No instance URL was given.');\n        }\n    }\n}\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { URL } from 'node:url';\nimport InvalidInstanceUrlError from '../errors/InvalidInstanceUrlError.js';\n\nexport const getValidInstanceUrl = (url: string): string => {\n    try {\n        const cleanHost = url.replace(/^https?:\\/\\//, '');\n        const parsedUrl = new URL(`https://${cleanHost}`);\n        return parsedUrl.hostname;\n    } catch {\n        throw new InvalidInstanceUrlError(url);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport pc from 'picocolors';\nimport { HttpClient } from './httpClient.js';\nimport { Logger } from './logger.js';\nimport { Configuration } from './configuration.js';\n\nexport interface UserInfo {\n    name: string;\n    email: string;\n}\n\nexport const getUser = async (instanceUrl: string): Promise<UserInfo | undefined> => {\n    const httpClient = new HttpClient(instanceUrl);\n\n    const accessToken = Configuration.get('tokens.access_token');\n\n    try {\n        const user = await httpClient.post<{ data: { currentUser: UserInfo } }>(\n            '/graphql',\n            { query: '{ currentUser { email name } }' },\n            { headers: { Authorization: `Bearer ${accessToken}` } },\n        );\n        return user.data.currentUser;\n    } catch {\n        Logger.error(`You are not logged in, you can use the command ${pc.bold('frontify-cli login')}.`);\n        return undefined;\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { resolve } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport pc from 'picocolors';\nimport { Logger, copyFolder, updatePackageJsonProjectName } from '../utils/index.js';\n\nconst CONTENT_BLOCK_PREFIX = 'content-block-';\n\nexport const createNewContentBlock = (contentBlockName: string, template = 'tailwind'): void => {\n    Logger.info('Creating the content block...');\n\n    const blockPathInBlue = pc.blue(`./${contentBlockName}`);\n    Logger.info(`Scaffolding content block in ${blockPathInBlue}...`);\n\n    const templateDir = resolve(fileURLToPath(import.meta.url), `../../templates/${CONTENT_BLOCK_PREFIX}${template}`);\n    copyFolder(templateDir, contentBlockName, { exclude: ['node_modules'] });\n\n    updatePackageJsonProjectName(contentBlockName);\n\n    Logger.defaultInfo(`\\n${Logger.spacer(11)}You can now access the project and install dependencies.`);\n    const blockNameInBlue = pc.blue(`./${contentBlockName}`);\n    Logger.defaultInfo(`${Logger.spacer(4)}cd ${blockNameInBlue}`);\n    Logger.defaultInfo(`${Logger.spacer(4)}npm i`);\n    Logger.defaultInfo(`${Logger.spacer(4)}npm run serve`);\n\n    Logger.defaultInfo(`\\n${Logger.spacer(11)}Happy hacking!`);\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { resolve } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport pc from 'picocolors';\nimport { Logger, copyFolder, updatePackageJsonProjectName } from '../utils/index.js';\n\nexport const createNewApp = (appName: string, template, type: string): void => {\n    Logger.info(`Creating the ${type}...`);\n\n    const appInBlue = pc.blue(`./${appName}`);\n    Logger.info(`Scaffolding App in ${appInBlue}...`);\n\n    const templateDir = resolve(fileURLToPath(import.meta.url), `../../templates/${type}-${template}`);\n    copyFolder(templateDir, appName, { exclude: ['node_modules'] });\n\n    updatePackageJsonProjectName(appName);\n\n    Logger.defaultInfo(`\\n${Logger.spacer(11)}You can now access the project and install dependencies.`);\n    const appNameInBlue = pc.blue(`./${appName}`);\n    Logger.defaultInfo(`${Logger.spacer(4)}cd ${appNameInBlue}`);\n    Logger.defaultInfo(`${Logger.spacer(4)}npm i`);\n    Logger.defaultInfo(`${Logger.spacer(4)}npm run serve`);\n\n    Logger.defaultInfo(`\\n${Logger.spacer(11)}Happy hacking!`);\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport pc from 'picocolors';\nimport fastGlob from 'fast-glob';\nimport open from 'open';\nimport { join } from 'node:path';\nimport {\n    CompilerOptions,\n    Configuration,\n    HttpClient,\n    Logger,\n    UserInfo,\n    getUser,\n    promiseExec,\n    reactiveJson,\n    readFileAsBase64,\n    readFileLinesAsArray,\n} from '../utils/index.js';\nimport { HttpClientError } from '../errors/HttpClientError.js';\n\ntype Options = {\n    dryRun?: boolean;\n    noVerify?: boolean;\n    openInBrowser?: boolean;\n};\n\nexport type AppManifest = {\n    appId: string;\n    appType?: string;\n};\n\nconst makeFilesDict = async (glob: string, ignoreGlobs?: string[]) => {\n    const folderFiles = await fastGlob(join(glob, '**'), { ignore: ignoreGlobs, dot: true });\n\n    const folderFilenames = folderFiles.map((filePath) => filePath.replace(`${glob}/`, ''));\n\n    return folderFilenames.reduce((stack, filename, index) => {\n        stack[`/${filename}`] = readFileAsBase64(folderFiles[index]);\n        return stack;\n    }, {});\n};\n\nconst BUILD_FILE_BLOCK_LIST = ['**/*.*.map'];\nconst SOURCE_FILE_BLOCK_LIST = ['.git', 'node_modules', 'dist', '.vscode', '.idea', 'README.md', '.DS_Store'];\n\nexport const createDeployment = async (\n    entryFile: string,\n    distPath: string,\n    { dryRun = false, noVerify = false, openInBrowser = false }: Options,\n    compile: ({ projectPath, entryFile, outputName }: CompilerOptions) => Promise<unknown>,\n): Promise<void> => {\n    try {\n        let user: UserInfo | undefined;\n        const instanceUrl = Configuration.get('instanceUrl') as string | undefined;\n        if (!instanceUrl) {\n            Logger.error(`You are not logged in, you can use the command ${pc.bold('frontify-cli login')}.`);\n            process.exit(-1);\n        }\n\n        if (!dryRun) {\n            user = await getUser(instanceUrl);\n            user && Logger.info(`You are logged in as ${user.name} (${instanceUrl}).`);\n        }\n\n        if (user || dryRun) {\n            dryRun && Logger.info(pc.blue('Dry run: enabled'));\n\n            const projectPath = process.cwd();\n            const { appId } = reactiveJson<AppManifest>(join(projectPath, 'manifest.json'));\n\n            if (!noVerify) {\n                Logger.info('Performing type checks...');\n                await promiseExec('npx tsc --noEmit');\n\n                Logger.info('Performing eslint checks...');\n                await promiseExec('npx eslint src');\n            }\n\n            try {\n                await compile({ projectPath, entryFile, outputName: appId });\n            } catch (error) {\n                Logger.error(error as string);\n                process.exit(-1);\n            }\n\n            const buildFilesToIgnore = BUILD_FILE_BLOCK_LIST.map((path) => join(projectPath, path));\n\n            const gitignoreEntries = readFileLinesAsArray(join(projectPath, '.gitignore')).filter(\n                (entry) => entry !== 'manifest.json',\n            );\n            const sourceFilesToIgnore = [...gitignoreEntries, ...SOURCE_FILE_BLOCK_LIST].map((path) =>\n                join(projectPath, path),\n            );\n\n            const request = {\n                build_files: await makeFilesDict(join(projectPath, distPath), buildFilesToIgnore),\n                source_files: await makeFilesDict(join(projectPath), sourceFilesToIgnore),\n            };\n\n            if (!dryRun) {\n                Logger.info('Sending the files to Frontify Marketplace...');\n\n                const httpClient = new HttpClient(instanceUrl);\n\n                const accessToken = Configuration.get('tokens.access_token');\n\n                try {\n                    await httpClient.put(`/api/marketplace/app/${appId}`, request, {\n                        headers: { Authorization: `Bearer ${accessToken}` },\n                    });\n\n                    Logger.success('The new version has been pushed.');\n\n                    if (openInBrowser) {\n                        Logger.info('Opening the Frontify Marketplace page...');\n                        await open(`https://${instanceUrl}/marketplace/apps/${appId}`);\n                    }\n                } catch (error) {\n                    Logger.error('An error occured while deploying:', (error as HttpClientError).responseBody.error);\n                    process.exit(-1);\n                }\n            } else {\n                Logger.success('The command has been executed without any issue.');\n                process.exit(0);\n            }\n        }\n    } catch (error) {\n        Logger.error('The deployment has failed and was aborted due to an error:', error as string);\n        process.exit(-1);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport Fastify from 'fastify';\nimport FastifyCors from '@fastify/cors';\nimport open from 'open';\n\nimport { Configuration, HttpClient, Logger, getUser, getValidInstanceUrl } from '../utils/index.js';\n\nexport interface OauthRandomCodeChallenge {\n    secret: string;\n    sha256: string;\n}\n\nexport interface OauthAccessTokenApiResponse {\n    access_token: string;\n    refresh_token: string;\n    expires_in: number;\n    token_type: string;\n}\n\nexport class Authenticator {\n    private readonly instanceUrl: string;\n    private readonly port: number;\n\n    private readonly httpClient: HttpClient;\n    private readonly fastifyServer = Fastify();\n\n    private randomChallenge: OauthRandomCodeChallenge | undefined;\n\n    constructor(instanceUrl: string, port = 5600) {\n        this.instanceUrl = instanceUrl;\n        this.port = port;\n\n        this.httpClient = new HttpClient(instanceUrl);\n    }\n\n    serveCallbackServer(): void {\n        this.registerPlugins();\n        this.registerRoutes();\n\n        this.fastifyServer.listen({ port: this.port });\n    }\n\n    private registerRoutes(): void {\n        this.fastifyServer.get<{ Querystring: { code: string } }>('/oauth', async (req, res) => {\n            Logger.info('Access granted, getting access token...');\n            res.send('You can close this window.');\n\n            const tokens = await this.getOauthCredentialDetails(req.query.code);\n            Logger.info('Tokens received, storing tokens...');\n            Configuration.set('tokens', tokens);\n            Configuration.set('instanceUrl', this.instanceUrl);\n\n            const user = await getUser(this.instanceUrl);\n            user && Logger.success(`${`Welcome back ${user.name} (${this.instanceUrl})!`}`);\n\n            process.exit(0);\n        });\n    }\n\n    private registerPlugins(): void {\n        this.fastifyServer.register(FastifyCors);\n    }\n\n    async storeRandomCodeChallenge(): Promise<void> {\n        try {\n            const randomCodeChallenge = await this.httpClient.get<{ data: OauthRandomCodeChallenge }>(\n                '/api/oauth/random',\n            );\n            this.randomChallenge = randomCodeChallenge.data;\n        } catch {\n            throw new Error('An error occured while getting the random challenge.');\n        }\n    }\n\n    getLoginUrl(): string {\n        if (!this.randomChallenge) {\n            throw new Error('Random challenge needs to be defined');\n        }\n\n        const queryParams = [\n            'response_type=code',\n            'client_id=block-cli',\n            'redirect_uri=http://localhost:5600/oauth',\n            'scope=basic:read%2Bblocks:read%2Bblocks:write',\n            `code_challenge=${this.randomChallenge.sha256}`,\n            'code_challenge_method=S256',\n        ].join('&');\n\n        return `https://${this.instanceUrl}/api/oauth/authorize?${queryParams}`;\n    }\n\n    async getOauthCredentialDetails(authorizationCode: string): Promise<OauthAccessTokenApiResponse> {\n        if (!this.randomChallenge) {\n            throw new Error('Random challenge needs to be defined');\n        }\n\n        try {\n            const tokens = await this.httpClient.post<OauthAccessTokenApiResponse>('/api/oauth/accesstoken', {\n                grant_type: 'authorization_code',\n                client_id: 'block-cli',\n                redirect_uri: 'http://localhost:5600/oauth',\n                scope: 'basic:read%2Bblocks:read%2Bblocks:write',\n                code_verifier: this.randomChallenge.secret,\n                code: authorizationCode,\n            });\n\n            return tokens;\n        } catch (error) {\n            throw new Error(`An error occured while getting tokens: ${(error as Error).message}`);\n        }\n    }\n}\n\nexport const loginUser = async (instanceUrl: string, port: number): Promise<void> => {\n    try {\n        const cleanedInstanceUrl = getValidInstanceUrl(instanceUrl);\n        const authenticator = new Authenticator(cleanedInstanceUrl, port);\n        authenticator.serveCallbackServer();\n        await authenticator.storeRandomCodeChallenge();\n\n        const loginUrl = authenticator.getLoginUrl();\n\n        Logger.info('Attempting to open OAuth login page...');\n        Logger.info(\n            `If a browser window doesn't automatically open, please open the following link manually: ${loginUrl}`,\n        );\n        await open(loginUrl);\n    } catch {\n        Logger.error('You need to enter a valid Frontify instance URL.');\n        process.exit(-1);\n    }\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { Logger } from '../utils/logger.js';\nimport { Configuration } from '../utils/configuration.js';\n\nexport const logoutUser = (): void => {\n    Configuration.delete('tokens');\n    //TODO: Call API endpoint\n    Logger.info('You are now logged out.');\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport react from '@vitejs/plugin-react';\nimport { createServer } from 'vite';\nimport { viteExternalsPlugin } from 'vite-plugin-externals';\nimport { Logger } from '../utils/logger.js';\nimport { getAppBridgeVersion } from '../utils/appBridgeVersion.js';\nimport pkg from '../../package.json';\n\nclass PlatformAppDevelopmentServer {\n    constructor(private readonly port: number) {}\n\n    async serve(): Promise<void> {\n        try {\n            const viteServer = await createServer({\n                root: process.cwd(),\n                configFile: false,\n                plugins: [\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    //@ts-ignore\n                    react(),\n                ],\n                define: {\n                    'process.env.NODE_ENV': JSON.stringify('development'),\n                },\n                base: `http://localhost:${this.port}/`,\n            });\n\n            const server = await viteServer.listen(this.port, true);\n            server.printUrls();\n        } catch (error) {\n            console.error(error);\n            process.exit(1);\n        }\n    }\n}\n\nclass DevelopmentServer {\n    constructor(\n        private readonly entryFilePath: string,\n        private readonly port: number,\n        private readonly allowExternal: boolean,\n    ) {}\n\n    async serve(): Promise<void> {\n        try {\n            const viteServer = await createServer({\n                root: process.cwd(),\n                plugins: [\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    //@ts-ignore\n                    react(),\n                    viteExternalsPlugin({\n                        react: 'React',\n                        'react-dom': 'ReactDOM',\n                    }),\n                ],\n                define: {\n                    'process.env.NODE_ENV': JSON.stringify('development'),\n                    'DevCustomBlock.dependencies.appBridge': JSON.stringify(getAppBridgeVersion(process.cwd())),\n                },\n                base: `http://localhost:${this.port}/`,\n                appType: 'custom',\n                server: {\n                    port: this.port,\n                    host: this.allowExternal ? '0.0.0.0' : 'localhost',\n                    cors: true,\n                    hmr: {\n                        port: this.port,\n                        host: this.allowExternal ? '0.0.0.0' : 'localhost',\n                        protocol: 'ws',\n                    },\n                },\n            });\n\n            viteServer.middlewares.use('/', (req, res, next) => {\n                if (req.url !== '/') {\n                    return next();\n                }\n\n                res.writeHead(200);\n                return res.end('OK');\n            });\n\n            viteServer.middlewares.use('/_entrypoint', (req, res, next) => {\n                if (req.url !== '/') {\n                    return next();\n                }\n\n                res.setHeader('Content-Type', 'application/json');\n                res.writeHead(200);\n                return res.end(\n                    JSON.stringify({\n                        url: `http://localhost:${this.port}/${this.entryFilePath}`,\n                        entryFilePath: this.entryFilePath,\n                        port: this.port,\n                        version: pkg.version,\n                    }),\n                );\n            });\n\n            const server = await viteServer.listen(this.port, true);\n            server.printUrls();\n        } catch (error) {\n            console.error(error);\n            process.exit(1);\n        }\n    }\n}\n\nexport const createDevelopmentServer = async (\n    entryFilePath: string,\n    port: number,\n    allowExternal: boolean,\n): Promise<void> => {\n    Logger.info('Starting the development server...');\n\n    const developmentServer = new DevelopmentServer(entryFilePath, port, allowExternal);\n    await developmentServer.serve();\n};\n\nexport const createDevelopmentServerForPlatformApp = async (port: number): Promise<void> => {\n    Logger.info('Starting the development server for Apps...');\n\n    const developmentServer = new PlatformAppDevelopmentServer(port);\n    await developmentServer.serve();\n};\n","/* (c) Copyright Frontify Ltd., all rights reserved. */\n\nimport { cac } from 'cac';\nimport prompts from 'prompts';\nimport { exit } from 'node:process';\nimport { join } from 'node:path';\n\nimport {\n    AppManifest,\n    createDeployment,\n    createDevelopmentServer,\n    createDevelopmentServerForPlatformApp,\n    createNewApp,\n    createNewContentBlock,\n    loginUser,\n    logoutUser,\n} from './commands/index.js';\nimport { compileBlock, compilePlatformApp, getValidInstanceUrl, isValidName, reactiveJson } from './utils/index.js';\nimport pkg from '../package.json';\n\nconst cli = cac(pkg.name.split('/')[1]);\n\ncli.command('login [instanceUrl]', 'log in to a Frontify instance')\n    .option('-i, --instance [instanceUrl]', '[string] url of the Frontify instance')\n    .option('-p, --port <port>', '[number] port for the oauth service', {\n        default: process.env.PORT || 5600,\n    })\n    .action(async (instanceUrl: string, options) => {\n        const computedInstanceUrl = instanceUrl || options.instance || process.env.INSTANCE_URL;\n        computedInstanceUrl && prompts.inject([computedInstanceUrl]);\n\n        const { promptedInstanceUrl } = await prompts([\n            {\n                type: 'text',\n                name: 'promptedInstanceUrl',\n                message: 'Enter a Frontify instance URL',\n                initial: 'instanceName.frontify.com',\n                validate: (value: string) => (value.trim() === '' ? 'You need to enter a valid URL.' : true),\n            },\n        ]);\n\n        if (!promptedInstanceUrl) {\n            exit(0);\n        }\n\n        const parsedInstanceUrl = getValidInstanceUrl(promptedInstanceUrl);\n\n        await loginUser(parsedInstanceUrl, options.port);\n    });\n\ncli.command('logout', 'log out of an instance').action(logoutUser);\n\n/**\n * @deprecated `block serve` and `theme serve` will be removed in version 4.0 in favour of `serve`\n */\nfor (const appType of ['block', 'theme']) {\n    cli.command(`${appType} serve`, `[deprecated: use 'serve' instead] serve the ${appType} locally`)\n        .alias(`${appType} dev`)\n        .option('-e, --entryPath, --entry-path <entryPath>', `[string] path to the ${appType} entry file`, {\n            default: join('src', 'index.tsx'),\n        })\n        .option('--port <port>', '[number] specify port', {\n            default: process.env.PORT || 5600,\n        })\n        .option('--allowExternal, --allow-external', '[boolean] allow external IPs to access the server', {\n            default: false,\n        })\n        .action(async (options) => {\n            await createDevelopmentServer(options.entryPath, options.port, options.allowExternal);\n        });\n}\n\ncli.command('serve', 'serve the app locally')\n    .alias('dev')\n    .option('-e, --entryPath, --entry-path <entryPath>', '[string] path to the entry file', {\n        default: join('src', 'index.ts'),\n    })\n    .option('--port <port>', '[number] specify port', {\n        default: process.env.PORT || 5600,\n    })\n    .option('--allowExternal, --allow-external', '[boolean] allow external IPs to access the server', {\n        default: false,\n    })\n    .option('--appType [appType], --app-type', '[string] specify app type. Overrides manifest values')\n    .action(async (options) => {\n        const manifest = reactiveJson<AppManifest>(join(process.cwd(), 'manifest.json'));\n        const appType = options.appType || manifest.appType;\n\n        if (appType === 'platform-app') {\n            await createDevelopmentServerForPlatformApp(options.port);\n        } else {\n            await createDevelopmentServer(options.entryPath, options.port, options.allowExternal);\n        }\n    });\n\n/**\n * @deprecated `block deploy` and `theme deploy` will be removed in version 4.0 in favour of `deploy`\n */\nfor (const appType of ['block', 'theme']) {\n    cli.command(`${appType} deploy`, `[deprecated: use 'deploy' instead] deploy the ${appType} to the marketplace`)\n        .option('-e, --entryPath <entryPath>', '[string] path to the entry file', { default: join('src', 'index.tsx') })\n        .option('-o, --outDir <outDir>', '[string] path to the output directory', { default: 'dist' })\n        .option('--dryRun, --dry-run', '[boolean] enable the dry run mode', { default: false })\n        .option('--noVerify, --no-verify', '[boolean] disable the linting and typechecking', { default: false })\n        .option('--open', '[boolean] open the marketplace app page', { default: false })\n        .action(async (options) => {\n            await createDeployment(\n                options.entryPath,\n                options.outDir,\n                {\n                    dryRun: options.dryRun,\n                    noVerify: options.noVerify,\n                    openInBrowser: options.open,\n                },\n                compileBlock,\n            );\n        });\n}\n\ncli.command('deploy', 'deploy the app to the marketplace')\n    .option('-e, --entryPath <entryPath>', '[string] path to the entry file', { default: join('src', 'index.ts') })\n    .option('-o, --outDir <outDir>', '[string] path to the output directory', { default: 'dist' })\n    .option('--dryRun, --dry-run', '[boolean] enable the dry run mode', { default: false })\n    .option('--noVerify, --no-verify', '[boolean] disable the linting and typechecking', { default: false })\n    .option('--open', '[boolean] open the marketplace app page', { default: false })\n    .option('--appType [appType], --app-type', '[string] specify app type. Overrides manifest values')\n    .action(async (options) => {\n        const manifest = reactiveJson<AppManifest>(join(process.cwd(), 'manifest.json'));\n        const appType = options.appType || manifest.appType;\n\n        if (appType === 'platform-app') {\n            await createDeployment(\n                options.entryPath,\n                options.outDir,\n                {\n                    dryRun: options.dryRun,\n                    noVerify: options.noVerify,\n                    openInBrowser: options.open,\n                },\n                compilePlatformApp,\n            );\n        } else {\n            await createDeployment(\n                options.entryPath,\n                options.outDir,\n                {\n                    dryRun: options.dryRun,\n                    noVerify: options.noVerify,\n                    openInBrowser: options.open,\n                },\n                compileBlock,\n            );\n        }\n    });\n\ncli.command('create [appName]', 'create a new marketplace app')\n    .option('-e, --experimental', 'set experimental flag')\n    .action(async (appName: string, options) => {\n        if (options.experimental) {\n            const { promptedAppName, stylingFramework, appType } = await prompts([\n                {\n                    type: 'text',\n                    name: 'promptedAppName',\n                    message: 'Enter your app name',\n                    initial: appName || 'my-frontify-app',\n                    validate: (value: string) => {\n                        if (value.trim() === '') {\n                            return 'You need to enter an app name.';\n                        }\n\n                        return isValidName(value);\n                    },\n                },\n                {\n                    type: 'select',\n                    name: 'appType',\n                    message: 'Select the type of your app',\n                    choices: [\n                        { title: 'App', value: 'platform-app' },\n                        { title: 'Block', value: 'content-block' },\n                    ],\n                },\n                {\n                    type: 'select',\n                    name: 'stylingFramework',\n                    message: 'Choose a styling framework',\n                    choices: [\n                        { title: 'Tailwind', value: 'tailwind' },\n                        { title: 'CSS Modules', value: 'css-modules' },\n                        { title: 'None', value: 'css' },\n                    ],\n                },\n            ]);\n\n            if (!promptedAppName || !stylingFramework || !appType) {\n                exit(0);\n            }\n\n            createNewApp(promptedAppName, stylingFramework, appType);\n        } else {\n            const { promptedAppName, stylingFramework } = await prompts([\n                {\n                    type: 'text',\n                    name: 'promptedAppName',\n                    message: 'Enter your app name',\n                    initial: appName || 'my-frontify-app',\n                    validate: (value: string) => {\n                        if (value.trim() === '') {\n                            return 'You need to enter an app name.';\n                        }\n                        return isValidName(value);\n                    },\n                },\n                {\n                    type: 'select',\n                    name: 'stylingFramework',\n                    message: 'Choose a styling framework',\n                    choices: [\n                        { title: 'Tailwind', value: 'tailwind' },\n                        { title: 'CSS Modules', value: 'css-modules' },\n                        { title: 'None', value: 'css' },\n                    ],\n                },\n            ]);\n\n            if (!promptedAppName || !stylingFramework) {\n                exit(0);\n            }\n\n            createNewContentBlock(promptedAppName, stylingFramework);\n        }\n    });\n\n/**\n * @deprecated `block create` and `theme create` will be removed in version 4.0 in favour of `create`\n */\nfor (const appType of ['block', 'theme']) {\n    cli.command(\n        `${appType} create [appName]`,\n        `[deprecated: use 'create' instead] create a ${appType} app locally`,\n    ).action((appName: string) => createNewContentBlock(appName, 'css-modules'));\n}\n\ncli.help();\ncli.version(pkg.version);\n\nconst mergeOldBlockThemeCommands = (cliArgs: string[]) => {\n    const oldCommandIndex = cliArgs.findIndex((value) => value === 'block' || value === 'theme');\n    if (\n        oldCommandIndex !== -1 &&\n        (cliArgs[oldCommandIndex + 1] === 'serve' ||\n            cliArgs[oldCommandIndex + 1] === 'deploy' ||\n            cliArgs[oldCommandIndex + 1] === 'create')\n    ) {\n        cliArgs[oldCommandIndex] = `${cliArgs[oldCommandIndex]} ${cliArgs[oldCommandIndex + 1]}`;\n        cliArgs.splice(oldCommandIndex + 1, 1);\n    }\n\n    return cliArgs;\n};\n\ncli.parse(mergeOldBlockThemeCommands(process.argv));\n"],"names":["getCurrentTime","now","Logger","messages","pc","width","ParseJsonError","path","FileNotFoundError","reactiveJson","jsonRaw","readFileSync","jsonParsed","obj","prop","value","jsonString","writeFileSync","error","getAppBridgeVersion","rootPath","join","compileBlock","projectPath","entryFile","outputName","appBridgeVersion","build","react","viteExternalsPlugin","compilePlatformApp","getHash","text","createHash","htmlHashPlugin","html","bundle","cssFileName","jsFileName","options","Configuration","key","Conf","isDirectoryEmpty","folderPath","readdirSync","copyFolder","sourceFolderPath","destinationFolderPath","mkdirSync","excludePatterns","glob","globToRegExp","file","re","srcFile","resolve","destFile","copyFile","sourceFilePath","destinationFilePath","statSync","copyFileSync","readFile","filePath","readFileAsBase64","readFileLinesAsArray","line","HttpClientError","code","responseBody","HttpClient","baseUrl","method","url","body","response","fetch","responseJson","responseText","errorData","relativeUrl","updatePackageJsonProjectName","packageJsonPath","packageJson","isValidName","folderName","CommandExecutionError","promiseExec","command","reject","exec","stdout","InvalidInstanceUrlError","getValidInstanceUrl","cleanHost","URL","getUser","instanceUrl","httpClient","accessToken","CONTENT_BLOCK_PREFIX","createNewContentBlock","contentBlockName","template","blockPathInBlue","templateDir","fileURLToPath","blockNameInBlue","createNewApp","appName","type","appInBlue","appNameInBlue","makeFilesDict","ignoreGlobs","folderFiles","fastGlob","stack","filename","index","BUILD_FILE_BLOCK_LIST","SOURCE_FILE_BLOCK_LIST","createDeployment","distPath","dryRun","noVerify","openInBrowser","compile","user","appId","buildFilesToIgnore","sourceFilesToIgnore","entry","request","open","Authenticator","port","Fastify","req","res","tokens","FastifyCors","randomCodeChallenge","queryParams","authorizationCode","loginUser","cleanedInstanceUrl","authenticator","loginUrl","logoutUser","PlatformAppDevelopmentServer","createServer","DevelopmentServer","entryFilePath","allowExternal","viteServer","next","pkg","createDevelopmentServer","createDevelopmentServerForPlatformApp","cli","cac","computedInstanceUrl","prompts","promptedInstanceUrl","exit","parsedInstanceUrl","appType","manifest","promptedAppName","stylingFramework","mergeOldBlockThemeCommands","cliArgs","oldCommandIndex"],"mappings":"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"}